{***********************************************
FlexRouter 3.3
Author: Native Instruments
Written by: Jason Tackaberry, Dominik Svoboda
Modified: October 16, 2022
*************************************************}

on init
declare $concat_it
declare $concat_offset
declare $string_it
declare $list_it
declare $preproc_i
set_script_title("FlexRouter 3.3")
declare const $DEBUG := 1
declare const $CONFIG_VERSION := 5
declare const $MAX_GLOBAL_CONFIG := 32
declare const $GLOBAL_CONFIG_VERSION := 0
declare const $GLOBAL_CONFIG_CC_HANGING := 1
declare const $MAX_RULES := 32
declare const $MAX_GUI_RULES := 16
declare const $NUM_SOURCE_CHANNELS := 16
declare const $MAX_KEYSWITCHES_PER_RULE := 128
declare const $MAX_CONFIG_PER_RULE := 16
declare const $MAX_CONFIG_PER_KEYSWITCH := 8
declare const $MAX_REDIRECTS_PER_KEYSWITCH := 8
declare const $KEYSWITCH_UNDEFINED := 65535
declare const $RULE_DEFINED := 0
declare const $RULE_ENABLED := 1
declare const $RULE_KEYSWITCH_CHANNEL := 2
declare const $RULE_TARGET_CHANNEL := 3
declare const $RULE_SOURCE_CHANNEL := 4
declare const $RULE_CC_CHASING := 5
declare const $RULE_KEYSWITCH_ACTION := 0
declare const $KEYSWITCH_ACTION_BLOCK := 0
declare const $KEYSWITCH_ACTION_PASSTHROUGH := 1
declare const $KEYSWITCH_ACTION_REDIRECT := 2
declare const $RULE_KEYSWITCH_FLAGS := 1
declare const $KEYSWITCH_FLAG_HOLD_NOTES := 1
declare const $KEYSWITCH_FLAG_IGNORE_ROUTING := 2
declare const $RULE_TIMING := 6
declare const $RULE_TIMING_FIRST_NOTE := 11
declare const $RULE_RANGE_IN := 7
declare const $RULE_RANGE_OUT := 8
declare const $RULE_VELOCITYFORCC := 9
declare const $KEYSWITCH_VELOCITYFORCC := 10
declare const $RULE_KEYSWITCH_SOURCE_CHANNEL := 2
declare const $RULE_KEYSWITCH_TARGET_CHANNEL := 3
declare const $RULE_KEYSWITCH_VELOCITY_RANGE := 4
declare const $RULE_KEYSWITCH_TRANSPOSE := 5
declare const $VELOCITY_RANGE_DEFAULT := 32512
declare !rules___name[$MAX_RULES]
declare %rules___config[$MAX_RULES*$MAX_CONFIG_PER_RULE] := (0)
declare %rules___keyswitches[$MAX_RULES*$MAX_KEYSWITCHES_PER_RULE] := ($KEYSWITCH_UNDEFINED)
declare %rules___keyswitch_config[$MAX_RULES*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH] := (-1)
declare %rules___keyswitch_redirects[$MAX_RULES*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH] := ($KEYSWITCH_UNDEFINED)
declare %global_config[$MAX_GLOBAL_CONFIG] := (-1)
declare %ks_to_keyswitch_channels[128*128+(128*128)] := (0)
declare %ks_to_rules[128*128+(128*128)] := (0)
declare %active_routes_bitmap[$NUM_SOURCE_CHANNELS*2] := (0)
declare %active_notes_routes_bitmap[$NUM_SOURCE_CHANNELS*128*2] := (0)
declare %active_notes_transpose[$NUM_SOURCE_CHANNELS*128] := (0)
declare %active_notes_timing[$NUM_SOURCE_CHANNELS*128] := (0)
declare %active_notes_timing_first_note[$NUM_SOURCE_CHANNELS*128] := (0)
declare %active_keyswitch_notes_list[$MAX_RULES*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH] := (-1)
declare %active_ccs_routes_bitmap[$NUM_SOURCE_CHANNELS*128*2] := (0)
declare %last_cc_values_by_source[$NUM_SOURCE_CHANNELS*128] := (-1)
declare %last_cc_values[128] := (-1)
declare %blackholed_sources[$NUM_SOURCE_CHANNELS] := (0)
declare $active_keyswitch_source_channels_bitmap := 0
declare $transpose := 0
declare $num_ks_down := 0
declare $is_note_on_event
declare $is_note_off_event
declare $config
declare $offset
declare $idx
declare $i
declare $j
declare $k
declare $count
declare $ks
declare $source
declare $target
declare $rule
declare $flag
declare $triggered
declare $action
declare $value
declare $evcode
declare $velocity
declare $timing := 0
declare $timing_first_note := 0
declare $range_in := 0
declare $range_out := 0
declare $velocityforcc := 0
declare $last_note
declare $index_note := 0
declare $pressed := 0
declare $dst_midi_byte_1
declare %legato_array[2]
declare $need_maps_rebuild := 1
declare @name
declare !notes[12]
declare !note_names[128]
declare !channel_names[64]
!notes[0] := "C"
!notes[1] := "C#"
!notes[2] := "D"
!notes[3] := "D#"
!notes[4] := "E"
!notes[5] := "F"
!notes[6] := "F#"
!notes[7] := "G"
!notes[8] := "G#"
!notes[9] := "A"
!notes[10] := "A#"
!notes[11] := "B"
$i := 0
while ($i<=127)
!note_names[$i] := !notes[$i mod 12] & ($i/12-2)
inc($i)
end while
$i := 0
while ($i<=63)
if ($i<16)
!channel_names[$i] := "[A] " & ($i mod 16+1)
else
if ($i<32)
!channel_names[$i] := "[B] " & ($i mod 16+1)
else
if ($i<48)
!channel_names[$i] := "[C] " & ($i mod 16+1)
else
!channel_names[$i] := "[D] " & ($i mod 16+1)
end if
end if
end if
inc($i)
end while
make_persistent(%global_config)
declare @_rules_name00
declare @_rules_name01
declare @_rules_name02
declare @_rules_name03
declare @_rules_name04
declare @_rules_name05
declare @_rules_name06
declare @_rules_name07
declare @_rules_name08
declare @_rules_name09
declare @_rules_name10
declare @_rules_name11
declare @_rules_name12
declare @_rules_name13
declare @_rules_name14
declare @_rules_name15
make_persistent(@_rules_name00)
make_persistent(@_rules_name01)
make_persistent(@_rules_name02)
make_persistent(@_rules_name03)
make_persistent(@_rules_name04)
make_persistent(@_rules_name05)
make_persistent(@_rules_name06)
make_persistent(@_rules_name07)
make_persistent(@_rules_name08)
make_persistent(@_rules_name09)
make_persistent(@_rules_name10)
make_persistent(@_rules_name11)
make_persistent(@_rules_name12)
make_persistent(@_rules_name13)
make_persistent(@_rules_name14)
make_persistent(@_rules_name15)
make_persistent(%rules___config)
make_persistent(%rules___keyswitches)
make_persistent(%rules___keyswitch_config)
make_persistent(%rules___keyswitch_redirects)
make_persistent(%active_routes_bitmap)
make_persistent(%blackholed_sources)
make_persistent($transpose)
make_persistent($timing)
make_persistent($timing_first_note)
%global_config[$GLOBAL_CONFIG_VERSION] := $CONFIG_VERSION
%global_config[$GLOBAL_CONFIG_CC_HANGING] := 2
!rules___name[0] := "Group 1"
select (0)
case 0
@_rules_name00 := "Group 1"
case 1
@_rules_name01 := "Group 1"
case 2
@_rules_name02 := "Group 1"
case 3
@_rules_name03 := "Group 1"
case 4
@_rules_name04 := "Group 1"
case 5
@_rules_name05 := "Group 1"
case 6
@_rules_name06 := "Group 1"
case 7
@_rules_name07 := "Group 1"
case 8
@_rules_name08 := "Group 1"
case 9
@_rules_name09 := "Group 1"
case 10
@_rules_name10 := "Group 1"
case 11
@_rules_name11 := "Group 1"
case 12
@_rules_name12 := "Group 1"
case 13
@_rules_name13 := "Group 1"
case 14
@_rules_name14 := "Group 1"
case 15
@_rules_name15 := "Group 1"
end select
%rules___config[0*$MAX_CONFIG_PER_RULE+$RULE_DEFINED] := 1
%rules___config[0*$MAX_CONFIG_PER_RULE+$RULE_ENABLED] := 1
%rules___config[0*$MAX_CONFIG_PER_RULE+$RULE_KEYSWITCH_CHANNEL] := 1
%rules___config[0*$MAX_CONFIG_PER_RULE+$RULE_SOURCE_CHANNEL] := -1
%rules___config[0*$MAX_CONFIG_PER_RULE+$RULE_TARGET_CHANNEL] := 1
%rules___config[0*$MAX_CONFIG_PER_RULE+$RULE_CC_CHASING] := 2
$i := 0
while ($i<$MAX_KEYSWITCHES_PER_RULE)
%rules___keyswitches[0*$MAX_KEYSWITCHES_PER_RULE+$i] := $KEYSWITCH_UNDEFINED
%rules___keyswitch_config[0*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] := $VELOCITY_RANGE_DEFAULT
%rules___keyswitch_config[0*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_ACTION] := $KEYSWITCH_ACTION_BLOCK
%rules___keyswitch_config[0*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_FLAGS] := 0
%rules___keyswitch_config[0*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING] := 0
%rules___keyswitch_config[0*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING_FIRST_NOTE] := 0
%rules___keyswitch_config[0*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_SOURCE_CHANNEL] := 0
%rules___keyswitch_config[0*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_TARGET_CHANNEL] := 0
$j := 0
while ($j<$MAX_REDIRECTS_PER_KEYSWITCH)
%rules___keyswitch_redirects[0*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($i*$MAX_REDIRECTS_PER_KEYSWITCH)+$j] := (%rules___keyswitch_redirects[0*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($i*$MAX_REDIRECTS_PER_KEYSWITCH)+$j] .and. -65536)+$KEYSWITCH_UNDEFINED
inc($j)
end while
inc($i)
end while
read_persistent_var(%global_config)
read_persistent_var(%active_routes_bitmap)
read_persistent_var(%blackholed_sources)
read_persistent_var(@_rules_name00)
read_persistent_var(@_rules_name01)
read_persistent_var(@_rules_name02)
read_persistent_var(@_rules_name03)
read_persistent_var(@_rules_name04)
read_persistent_var(@_rules_name05)
read_persistent_var(@_rules_name06)
read_persistent_var(@_rules_name07)
read_persistent_var(@_rules_name08)
read_persistent_var(@_rules_name09)
read_persistent_var(@_rules_name10)
read_persistent_var(@_rules_name11)
read_persistent_var(@_rules_name12)
read_persistent_var(@_rules_name13)
read_persistent_var(@_rules_name14)
read_persistent_var(@_rules_name15)
!rules___name[0] := @_rules_name00
!rules___name[1] := @_rules_name01
!rules___name[2] := @_rules_name02
!rules___name[3] := @_rules_name03
!rules___name[4] := @_rules_name04
!rules___name[5] := @_rules_name05
!rules___name[6] := @_rules_name06
!rules___name[7] := @_rules_name07
!rules___name[8] := @_rules_name08
!rules___name[9] := @_rules_name09
!rules___name[10] := @_rules_name10
!rules___name[11] := @_rules_name11
!rules___name[12] := @_rules_name12
!rules___name[13] := @_rules_name13
!rules___name[14] := @_rules_name14
!rules___name[15] := @_rules_name15
read_persistent_var(%rules___config)
read_persistent_var(%rules___keyswitches)
read_persistent_var(%rules___keyswitch_config)
read_persistent_var(%rules___keyswitch_redirects)
read_persistent_var($timing)
read_persistent_var($timing_first_note)
read_persistent_var($transpose)
if (%global_config[$GLOBAL_CONFIG_VERSION]<2)
$rule := 0
while ($rule<$MAX_RULES)
$ks := 0
while ($ks<$MAX_KEYSWITCHES_PER_RULE)
if (%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$ks]<0)
%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$ks] := $KEYSWITCH_UNDEFINED
end if
$evcode := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($ks*$MAX_CONFIG_PER_KEYSWITCH)+0]
$velocity := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($ks*$MAX_CONFIG_PER_KEYSWITCH)+1]
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($ks*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_FLAGS] := 0
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($ks*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING] := 0
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($ks*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING_FIRST_NOTE] := 0
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($ks*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] := $VELOCITY_RANGE_DEFAULT
$i := 0
while ($i<$MAX_REDIRECTS_PER_KEYSWITCH)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($ks*$MAX_REDIRECTS_PER_KEYSWITCH)+$i] := $KEYSWITCH_UNDEFINED
inc($i)
end while
if ($evcode=-1)
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($ks*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_ACTION] := $KEYSWITCH_ACTION_BLOCK
else
if ($evcode=-2)
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($ks*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_ACTION] := $KEYSWITCH_ACTION_PASSTHROUGH
else
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($ks*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_ACTION] := $KEYSWITCH_ACTION_REDIRECT
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($ks*$MAX_REDIRECTS_PER_KEYSWITCH)+0] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($ks*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. -65536)+$evcode
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($ks*$MAX_REDIRECTS_PER_KEYSWITCH)+0] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($ks*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. -16711681)+sh_left($velocity,16)
end if
end if
inc($ks)
end while
inc($rule)
end while
end if
if (%global_config[$GLOBAL_CONFIG_VERSION]<3)
$rule := 0
while ($rule<$MAX_RULES)
$ks := 0
while ($ks<$MAX_KEYSWITCHES_PER_RULE)
if (%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$ks]>(128*128))
$value := %rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$ks] mod 128
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($ks*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] := (%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($ks*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 65280)+$value
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($ks*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] := (%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($ks*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 255)+sh_left($value,8)
end if
inc($ks)
end while
inc($rule)
end while
end if
if (%global_config[$GLOBAL_CONFIG_VERSION]<5)
$rule := 0
while ($rule<$MAX_RULES)
$ks := 0
while ($ks<$MAX_KEYSWITCHES_PER_RULE)
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($ks*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_TRANSPOSE] := 0
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($ks*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING] := 0
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($ks*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING_FIRST_NOTE] := 0
inc($ks)
end while
inc($rule)
end while
end if
%global_config[$GLOBAL_CONFIG_VERSION] := $CONFIG_VERSION
declare ui_label $label_global_config(1,1)
declare ui_menu $menu_global_cc_hanging
declare ui_menu $menu_rules
declare ui_button $button_add
declare ui_button $button_remove
declare ui_switch $button_rule_bypass
declare ui_switch $button_rule_clone
declare ui_label $label_rule_name(1,1)
declare ui_text_edit @text_rule_name
declare ui_label $label_rule_keyswitch_channel(1,1)
declare ui_menu $menu_rule_keyswitch_channel
declare ui_label $label_rule_source_channel(1,1)
declare ui_menu $menu_rule_source_channel
declare ui_label $label_rule_target_channel(1,1)
declare ui_menu $menu_rule_target_channel
declare ui_label $label_rule_cc_chasing(1,1)
declare ui_menu $menu_rule_cc_chasing
declare ui_label $label_rule_cc_chasing_info(1,1)
declare ui_label $label_keyswitches(1,1)
declare ui_menu $menu_keyswitches
declare ui_button $button_keyswitch_new
declare ui_switch $button_keyswitch_midi_learn
declare ui_switch $button_keyswitch_midi_learn_inc
declare ui_switch $button_keyswitch_midi_find
declare ui_button $button_keyswitch_clone
declare ui_button $button_keyswitch_remove
declare ui_button $button_keyswitch_clear
declare ui_label $label_rule_keyswitch(1,1)
declare ui_menu $menu_rule_keyswitch_type
declare ui_value_edit $value_rule_keyswitch_key(0,127,$VALUE_EDIT_MODE_NOTE_NAMES)
declare ui_label $label_rule_keyswitch_velocity_range_from(1,1)
declare ui_value_edit $value_rule_keyswitch_velocity_range_min(0,127,1)
declare ui_label $label_rule_keyswitch_velocity_range_to(1,1)
declare ui_value_edit $value_rule_keyswitch_velocity_range_max(0,127,1)
declare ui_value_edit $value_rule_keyswitch_cc(0,127,1)
declare ui_label $label_rule_keyswitch_cc_value_range_from(1,1)
declare ui_value_edit $value_rule_keyswitch_cc_value_range_min(0,127,1)
declare ui_label $label_rule_keyswitch_cc_value_range_to(1,1)
declare ui_value_edit $value_rule_keyswitch_cc_value_range_max(0,127,1)
declare ui_value_edit $value_rule_keyswitch_program(1,128,1)
declare ui_label $label_rule_timing(1,1)
declare ui_value_edit $value_rule_timing(0,1000,1)
declare ui_label $label_rule_timing_first_note(1,1)
declare ui_value_edit $value_rule_timing_first_note(0,1000,1)
declare ui_label $label_rule_keyswitch_source_channel(1,1)
declare ui_menu $menu_rule_keyswitch_source_channel
declare ui_label $label_rule_keyswitch_target_channel(1,1)
declare ui_menu $menu_rule_keyswitch_target_channel
declare ui_label $label_rule_keyswitch_flags(1,1)
declare ui_switch $switch_rule_keyswitch_flags_hold_notes
declare ui_switch $switch_rule_keyswitch_flags_redirect_only
declare ui_label $label_rule_keyswitch_transpose(1,1)
declare ui_value_edit $value_rule_keyswitch_transpose(-64,64,1)
declare ui_label $label_rule_keyswitch_action(1,1)
declare ui_menu $menu_rule_keyswitch_action
declare ui_label $label_rule_keyswitch_redirect_to(1,1)
declare %button_rule_keyswitch_addremove[4]
declare ui_button $button_rule_keyswitch_addremove0
declare ui_button $button_rule_keyswitch_addremove1
declare ui_button $button_rule_keyswitch_addremove2
declare ui_button $button_rule_keyswitch_addremove3
$preproc_i := 0
while ($preproc_i<=3)
%button_rule_keyswitch_addremove[$preproc_i] := get_ui_id($button_rule_keyswitch_addremove0)+$preproc_i
inc($preproc_i)
end while
declare %menu_rule_keyswitch_redirect_type[4]
declare ui_menu $menu_rule_keyswitch_redirect_type0
declare ui_menu $menu_rule_keyswitch_redirect_type1
declare ui_menu $menu_rule_keyswitch_redirect_type2
declare ui_menu $menu_rule_keyswitch_redirect_type3
$preproc_i := 0
while ($preproc_i<=3)
%menu_rule_keyswitch_redirect_type[$preproc_i] := get_ui_id($menu_rule_keyswitch_redirect_type0)+$preproc_i
inc($preproc_i)
end while
declare %value_rule_keyswitch_redirect_key[4]
declare ui_value_edit $value_rule_keyswitch_redirect_key0(0,127,$VALUE_EDIT_MODE_NOTE_NAMES)
declare ui_value_edit $value_rule_keyswitch_redirect_key1(0,127,$VALUE_EDIT_MODE_NOTE_NAMES)
declare ui_value_edit $value_rule_keyswitch_redirect_key2(0,127,$VALUE_EDIT_MODE_NOTE_NAMES)
declare ui_value_edit $value_rule_keyswitch_redirect_key3(0,127,$VALUE_EDIT_MODE_NOTE_NAMES)
$preproc_i := 0
while ($preproc_i<=3)
%value_rule_keyswitch_redirect_key[$preproc_i] := get_ui_id($value_rule_keyswitch_redirect_key0)+$preproc_i
inc($preproc_i)
end while
declare %label_rule_keyswitch_redirect_key_velocity[4]
declare ui_label $label_rule_keyswitch_redirect_key_velocity0(1,1)
declare ui_label $label_rule_keyswitch_redirect_key_velocity1(1,1)
declare ui_label $label_rule_keyswitch_redirect_key_velocity2(1,1)
declare ui_label $label_rule_keyswitch_redirect_key_velocity3(1,1)
$preproc_i := 0
while ($preproc_i<=3)
%label_rule_keyswitch_redirect_key_velocity[$preproc_i] := get_ui_id($label_rule_keyswitch_redirect_key_velocity0)+$preproc_i
inc($preproc_i)
end while
declare %value_rule_keyswitch_redirect_key_velocity[4]
declare ui_value_edit $value_rule_keyswitch_redirect_key_velocity0(0,127,1)
declare ui_value_edit $value_rule_keyswitch_redirect_key_velocity1(0,127,1)
declare ui_value_edit $value_rule_keyswitch_redirect_key_velocity2(0,127,1)
declare ui_value_edit $value_rule_keyswitch_redirect_key_velocity3(0,127,1)
$preproc_i := 0
while ($preproc_i<=3)
%value_rule_keyswitch_redirect_key_velocity[$preproc_i] := get_ui_id($value_rule_keyswitch_redirect_key_velocity0)+$preproc_i
inc($preproc_i)
end while
declare %value_rule_keyswitch_redirect_cc[4]
declare ui_value_edit $value_rule_keyswitch_redirect_cc0(0,127,1)
declare ui_value_edit $value_rule_keyswitch_redirect_cc1(0,127,1)
declare ui_value_edit $value_rule_keyswitch_redirect_cc2(0,127,1)
declare ui_value_edit $value_rule_keyswitch_redirect_cc3(0,127,1)
$preproc_i := 0
while ($preproc_i<=3)
%value_rule_keyswitch_redirect_cc[$preproc_i] := get_ui_id($value_rule_keyswitch_redirect_cc0)+$preproc_i
inc($preproc_i)
end while
declare %label_rule_keyswitch_redirect_cc_slash[4]
declare ui_label $label_rule_keyswitch_redirect_cc_slash0(1,1)
declare ui_label $label_rule_keyswitch_redirect_cc_slash1(1,1)
declare ui_label $label_rule_keyswitch_redirect_cc_slash2(1,1)
declare ui_label $label_rule_keyswitch_redirect_cc_slash3(1,1)
$preproc_i := 0
while ($preproc_i<=3)
%label_rule_keyswitch_redirect_cc_slash[$preproc_i] := get_ui_id($label_rule_keyswitch_redirect_cc_slash0)+$preproc_i
inc($preproc_i)
end while
declare %value_rule_keyswitch_redirect_cc_value[4]
declare ui_value_edit $value_rule_keyswitch_redirect_cc_value0(0,127,1)
declare ui_value_edit $value_rule_keyswitch_redirect_cc_value1(0,127,1)
declare ui_value_edit $value_rule_keyswitch_redirect_cc_value2(0,127,1)
declare ui_value_edit $value_rule_keyswitch_redirect_cc_value3(0,127,1)
$preproc_i := 0
while ($preproc_i<=3)
%value_rule_keyswitch_redirect_cc_value[$preproc_i] := get_ui_id($value_rule_keyswitch_redirect_cc_value0)+$preproc_i
inc($preproc_i)
end while
declare %value_rule_keyswitch_redirect_program[4]
declare ui_value_edit $value_rule_keyswitch_redirect_program0(1,128,1)
declare ui_value_edit $value_rule_keyswitch_redirect_program1(1,128,1)
declare ui_value_edit $value_rule_keyswitch_redirect_program2(1,128,1)
declare ui_value_edit $value_rule_keyswitch_redirect_program3(1,128,1)
$preproc_i := 0
while ($preproc_i<=3)
%value_rule_keyswitch_redirect_program[$preproc_i] := get_ui_id($value_rule_keyswitch_redirect_program0)+$preproc_i
inc($preproc_i)
end while
declare %button_rule_keyswitch_redirect_midi_learn[4]
declare ui_switch $button_rule_keyswitch_redirect_midi_learn0
declare ui_switch $button_rule_keyswitch_redirect_midi_learn1
declare ui_switch $button_rule_keyswitch_redirect_midi_learn2
declare ui_switch $button_rule_keyswitch_redirect_midi_learn3
$preproc_i := 0
while ($preproc_i<=3)
%button_rule_keyswitch_redirect_midi_learn[$preproc_i] := get_ui_id($button_rule_keyswitch_redirect_midi_learn0)+$preproc_i
inc($preproc_i)
end while
declare $keyswitch_redirect_midi_learn_index := -1
declare $y := 10
declare $keyswitch_name_update_parallelism := 0
make_persistent($menu_rules)
set_ui_height_px(310+(20*4))
set_text($label_global_config,"Global Config ")
set_control_par(get_ui_id($label_global_config),$CONTROL_PAR_POS_X,70)
set_control_par(get_ui_id($label_global_config),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_global_config),$CONTROL_PAR_WIDTH,75)
set_control_par(get_ui_id($label_global_config),$CONTROL_PAR_TEXT_ALIGNMENT,2)
set_control_par_str(get_ui_id($menu_global_cc_hanging),$CONTROL_PAR_HELP,"Ensures that, for the specified CCs, zero-values are sent to all channels that had previously received events for these CCs.")
set_control_par(get_ui_id($menu_global_cc_hanging),$CONTROL_PAR_POS_X,150)
set_control_par(get_ui_id($menu_global_cc_hanging),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($menu_global_cc_hanging),$CONTROL_PAR_WIDTH,150)
add_menu_item($menu_global_cc_hanging,"Allow CC Hanging",0)
add_menu_item($menu_global_cc_hanging,"Prevent hanging for all CCs",1)
add_menu_item($menu_global_cc_hanging,"Prevent hanging for CC2/64",2)
$y := $y+30
set_control_par_str(get_ui_id($menu_rules),$CONTROL_PAR_HELP,"The list of user defined groups. Up to 16 are allowed.")
set_control_par(get_ui_id($menu_rules),$CONTROL_PAR_POS_X,70)
set_control_par(get_ui_id($menu_rules),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($menu_rules),$CONTROL_PAR_WIDTH,210)
$i := 0
while ($i<$MAX_GUI_RULES)
add_menu_item($menu_rules,!rules___name[$i],$i)
set_menu_item_visibility(get_ui_id($menu_rules),$i,%rules___config[$i*$MAX_CONFIG_PER_RULE+$RULE_DEFINED])
inc($i)
end while
set_control_par_str(get_ui_id($button_add),$CONTROL_PAR_HELP,"Add a new keyswitch groups, with all fields initialized to default values.")
set_text($button_add,"Add Group")
set_control_par(get_ui_id($button_add),$CONTROL_PAR_POS_X,290)
set_control_par(get_ui_id($button_add),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($button_add),$CONTROL_PAR_WIDTH,60)
set_control_par_str(get_ui_id($button_remove),$CONTROL_PAR_HELP,"Remove the current group. If there's only one group, then it's reinitialized to default values.")
set_text($button_remove,"Remove Group")
set_control_par(get_ui_id($button_remove),$CONTROL_PAR_POS_X,360)
set_control_par(get_ui_id($button_remove),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($button_remove),$CONTROL_PAR_WIDTH,80)
set_control_par_str(get_ui_id($button_rule_bypass),$CONTROL_PAR_HELP,"Disable all keyswitches associated with this group.")
set_text($button_rule_bypass,"Bypass Group")
set_control_par(get_ui_id($button_rule_bypass),$CONTROL_PAR_POS_X,450)
set_control_par(get_ui_id($button_rule_bypass),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($button_rule_bypass),$CONTROL_PAR_WIDTH,75)
set_control_par(get_ui_id($button_rule_bypass),$CONTROL_PAR_TEXT_ALIGNMENT,1)
set_control_par_str(get_ui_id($button_rule_clone),$CONTROL_PAR_HELP,"Creates a new group, copying all settings and keyswitches from this group.")
set_text($button_rule_clone,"Clone Group")
set_control_par(get_ui_id($button_rule_clone),$CONTROL_PAR_POS_X,535)
set_control_par(get_ui_id($button_rule_clone),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($button_rule_clone),$CONTROL_PAR_WIDTH,75)
set_control_par(get_ui_id($button_rule_clone),$CONTROL_PAR_TEXT_ALIGNMENT,1)
$y := $y+30
set_text($label_rule_name,"Group Name")
set_control_par(get_ui_id($label_rule_name),$CONTROL_PAR_POS_X,95)
set_control_par(get_ui_id($label_rule_name),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_rule_name),$CONTROL_PAR_WIDTH,95)
set_control_par(get_ui_id($label_rule_name),$CONTROL_PAR_TEXT_ALIGNMENT,2)
set_control_par_str(get_ui_id(@text_rule_name),$CONTROL_PAR_HELP,"An aribitrary name for this group. Be descriptive!")
set_control_par(get_ui_id(@text_rule_name),$CONTROL_PAR_POS_X,200)
set_control_par(get_ui_id(@text_rule_name),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id(@text_rule_name),$CONTROL_PAR_WIDTH,190)
$y := $y+20
set_control_par_str(get_ui_id($menu_rule_keyswitch_channel),$CONTROL_PAR_HELP,"The channel on which all keyswitch events will be received. Omni means keyswitches will work on any channel.")
set_text($label_rule_keyswitch_channel,"Keyswitch Channel")
set_control_par(get_ui_id($label_rule_keyswitch_channel),$CONTROL_PAR_POS_X,95)
set_control_par(get_ui_id($label_rule_keyswitch_channel),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_rule_keyswitch_channel),$CONTROL_PAR_WIDTH,95)
set_control_par(get_ui_id($label_rule_keyswitch_channel),$CONTROL_PAR_TEXT_ALIGNMENT,2)
add_menu_item($menu_rule_keyswitch_channel,"Omni",-1)
set_control_par(get_ui_id($menu_rule_keyswitch_channel),$CONTROL_PAR_POS_X,200)
set_control_par(get_ui_id($menu_rule_keyswitch_channel),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($menu_rule_keyswitch_channel),$CONTROL_PAR_WIDTH,60)
$i := 1
while ($i<=16)
@name := !channel_names[$i-1]
add_menu_item($menu_rule_keyswitch_channel,@name,$i)
inc($i)
end while
$y := $y+20
set_control_par_str(get_ui_id($menu_rule_source_channel),$CONTROL_PAR_HELP,"Once a keyswitch is triggered and routes established, this is the default channel for the group on which all MIDI events will be routed to the target channel(s). Individual keyswitches can override this.")
set_text($label_rule_source_channel,"Default Source")
set_control_par(get_ui_id($label_rule_source_channel),$CONTROL_PAR_POS_X,95)
set_control_par(get_ui_id($label_rule_source_channel),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_rule_source_channel),$CONTROL_PAR_WIDTH,95)
set_control_par(get_ui_id($label_rule_source_channel),$CONTROL_PAR_TEXT_ALIGNMENT,2)
set_control_par(get_ui_id($menu_rule_source_channel),$CONTROL_PAR_POS_X,200)
set_control_par(get_ui_id($menu_rule_source_channel),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($menu_rule_source_channel),$CONTROL_PAR_WIDTH,60)
add_menu_item($menu_rule_source_channel,"Omni",-1)
$i := 1
while ($i<=16)
@name := !channel_names[$i-1]
add_menu_item($menu_rule_source_channel,@name,$i)
inc($i)
end while
$y := $y+20
set_control_par_str(get_ui_id($menu_rule_target_channel),$CONTROL_PAR_HELP,"Once a keyswitch is triggered, this is the default channel for the group to which all subsequent non-keyswitch events will be routed. Individual keyswitches can override this.")
set_text($label_rule_target_channel,"Default Target")
set_control_par(get_ui_id($label_rule_target_channel),$CONTROL_PAR_POS_X,95)
set_control_par(get_ui_id($label_rule_target_channel),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_rule_target_channel),$CONTROL_PAR_WIDTH,95)
set_control_par(get_ui_id($label_rule_target_channel),$CONTROL_PAR_TEXT_ALIGNMENT,2)
set_control_par(get_ui_id($menu_rule_target_channel),$CONTROL_PAR_POS_X,200)
set_control_par(get_ui_id($menu_rule_target_channel),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($menu_rule_target_channel),$CONTROL_PAR_WIDTH,60)
add_menu_item($menu_rule_target_channel,"Null",-1)
$i := 1
while ($i<=64)
@name := !channel_names[$i-1]
add_menu_item($menu_rule_target_channel,@name,$i)
inc($i)
end while
$y := $y+20
set_control_par_str(get_ui_id($menu_rule_cc_chasing),$CONTROL_PAR_HELP,"When activing keyswitches, replays the state of the given CCs to the new target channel(s). This can ensure a smooth transition between patches.")
set_text($label_rule_cc_chasing,"CC Chasing")
set_control_par(get_ui_id($label_rule_cc_chasing),$CONTROL_PAR_POS_X,95)
set_control_par(get_ui_id($label_rule_cc_chasing),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_rule_cc_chasing),$CONTROL_PAR_WIDTH,95)
set_control_par(get_ui_id($label_rule_cc_chasing),$CONTROL_PAR_TEXT_ALIGNMENT,2)
set_control_par(get_ui_id($menu_rule_cc_chasing),$CONTROL_PAR_POS_X,200)
set_control_par(get_ui_id($menu_rule_cc_chasing),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($menu_rule_cc_chasing),$CONTROL_PAR_WIDTH,125)
add_menu_item($menu_rule_cc_chasing,"No chasing",0)
add_menu_item($menu_rule_cc_chasing,"Chase all CCs",1)
add_menu_item($menu_rule_cc_chasing,"Chase common CCs",2)
set_text($label_rule_cc_chasing_info,"This is info about CC chasing.")
set_control_par(get_ui_id($label_rule_cc_chasing_info),$CONTROL_PAR_POS_X,325)
set_control_par(get_ui_id($label_rule_cc_chasing_info),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_rule_cc_chasing_info),$CONTROL_PAR_WIDTH,150)
set_control_par(get_ui_id($label_rule_cc_chasing_info),$CONTROL_PAR_TEXT_ALIGNMENT,2)
set_control_par(get_ui_id($label_rule_cc_chasing_info),$CONTROL_PAR_HIDE,$HIDE_PART_BG)
set_control_par(get_ui_id($label_rule_cc_chasing_info),$CONTROL_PAR_TEXT_ALIGNMENT,0)
set_control_par(get_ui_id($label_rule_cc_chasing_info),$CONTROL_PAR_FONT_TYPE,9)
$y := $y+30
set_text($label_keyswitches,"Keyswitches")
set_control_par(get_ui_id($label_keyswitches),$CONTROL_PAR_POS_X,95)
set_control_par(get_ui_id($label_keyswitches),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_keyswitches),$CONTROL_PAR_WIDTH,95)
set_control_par(get_ui_id($label_keyswitches),$CONTROL_PAR_TEXT_ALIGNMENT,2)
set_control_par_str(get_ui_id($menu_keyswitches),$CONTROL_PAR_HELP,"The list of configured keyswitches for the current group. Up to 127 keyswitches are allowed per group.")
set_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_POS_X,200)
set_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_WIDTH,100)
$i := 0
while ($i<$MAX_KEYSWITCHES_PER_RULE)
add_menu_item($menu_keyswitches,"",$i)
inc($i)
end while
set_control_par_str(get_ui_id($button_keyswitch_new),$CONTROL_PAR_HELP,"Create a new keyswitch, whose configuration is initialized to hopefully something intelligent based on context.")
set_text($button_keyswitch_new,"New")
set_control_par(get_ui_id($button_keyswitch_new),$CONTROL_PAR_POS_X,310)
set_control_par(get_ui_id($button_keyswitch_new),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($button_keyswitch_new),$CONTROL_PAR_WIDTH,35)
set_control_par_str(get_ui_id($button_keyswitch_midi_learn),$CONTROL_PAR_HELP,"MIDI learn a keyswitch (note, CC, or program change).  Duplicates are prevented -- if you want duplicates, you need to manually create them with the New or Clone buttons.")
set_text($button_keyswitch_midi_learn,"Learn")
set_control_par(get_ui_id($button_keyswitch_midi_learn),$CONTROL_PAR_POS_X,350)
set_control_par(get_ui_id($button_keyswitch_midi_learn),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($button_keyswitch_midi_learn),$CONTROL_PAR_WIDTH,40)
set_control_par_str(get_ui_id($button_keyswitch_midi_learn_inc),$CONTROL_PAR_HELP,"Same as the Learn button, except the keyswitch config is initialized to values based on the relative distance between the current and newly learned keyswitches.")
set_text($button_keyswitch_midi_learn_inc,"Learn++")
set_control_par(get_ui_id($button_keyswitch_midi_learn_inc),$CONTROL_PAR_POS_X,395)
set_control_par(get_ui_id($button_keyswitch_midi_learn_inc),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($button_keyswitch_midi_learn_inc),$CONTROL_PAR_WIDTH,50)
set_control_par_str(get_ui_id($button_keyswitch_midi_find),$CONTROL_PAR_HELP,"Find a keyswitch based on MIDI input. Don't forget to toggle this off when you're done searching!")
set_text($button_keyswitch_midi_find,"MIDI Find")
set_control_par(get_ui_id($button_keyswitch_midi_find),$CONTROL_PAR_POS_X,450)
set_control_par(get_ui_id($button_keyswitch_midi_find),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($button_keyswitch_midi_find),$CONTROL_PAR_WIDTH,55)
set_control_par_str(get_ui_id($button_keyswitch_clone),$CONTROL_PAR_HELP,"Create a new keyswitch with identical configuration.")
set_text($button_keyswitch_clone,"Clone")
set_control_par(get_ui_id($button_keyswitch_clone),$CONTROL_PAR_POS_X,510)
set_control_par(get_ui_id($button_keyswitch_clone),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($button_keyswitch_clone),$CONTROL_PAR_WIDTH,35)
set_control_par_str(get_ui_id($button_keyswitch_remove),$CONTROL_PAR_HELP,"Remove the currently selected keyswitch from the group.")
set_text($button_keyswitch_remove,"Remove")
set_control_par(get_ui_id($button_keyswitch_remove),$CONTROL_PAR_POS_X,550)
set_control_par(get_ui_id($button_keyswitch_remove),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($button_keyswitch_remove),$CONTROL_PAR_WIDTH,45)
set_control_par(get_ui_id($button_keyswitch_clear),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
$y := $y+20
set_text($label_rule_keyswitch,"Keyswitch")
set_control_par(get_ui_id($label_rule_keyswitch),$CONTROL_PAR_POS_X,135)
set_control_par(get_ui_id($label_rule_keyswitch),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_rule_keyswitch),$CONTROL_PAR_WIDTH,55)
set_control_par(get_ui_id($label_rule_keyswitch),$CONTROL_PAR_TEXT_ALIGNMENT,2)
set_control_par_str(get_ui_id($menu_rule_keyswitch_type),$CONTROL_PAR_HELP,"Defines the type of keyswitch: either a note, a CC event, or Program Change.")
set_control_par(get_ui_id($menu_rule_keyswitch_type),$CONTROL_PAR_POS_X,200)
set_control_par(get_ui_id($menu_rule_keyswitch_type),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($menu_rule_keyswitch_type),$CONTROL_PAR_WIDTH,40)
add_menu_item($menu_rule_keyswitch_type,"Key",0)
add_menu_item($menu_rule_keyswitch_type,"CC",1)
add_menu_item($menu_rule_keyswitch_type,"Prog",2)
set_control_par_str(get_ui_id($value_rule_keyswitch_key),$CONTROL_PAR_HELP,"Receiving this note on the group's keyswitch channel will trigger the keyswitch.")
set_control_par(get_ui_id($value_rule_keyswitch_key),$CONTROL_PAR_POS_X,245)
set_control_par(get_ui_id($value_rule_keyswitch_key),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_keyswitch_key),$CONTROL_PAR_WIDTH,40)
set_text($value_rule_keyswitch_key,"")
set_control_par_str(get_ui_id($label_rule_keyswitch_velocity_range_from),$CONTROL_PAR_TEXT,"with velocity")
set_control_par_str(get_ui_id($label_rule_keyswitch_velocity_range_from),$CONTROL_PAR_PICTURE,0)
set_control_par(get_ui_id($label_rule_keyswitch_velocity_range_from),$CONTROL_PAR_TEXT_ALIGNMENT,1)
set_control_par(get_ui_id($label_rule_keyswitch_velocity_range_from),$CONTROL_PAR_POS_X,290)
set_control_par(get_ui_id($label_rule_keyswitch_velocity_range_from),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_rule_keyswitch_velocity_range_from),$CONTROL_PAR_WIDTH,70)
set_control_par_str(get_ui_id($value_rule_keyswitch_velocity_range_min),$CONTROL_PAR_HELP,"Minimum velocity for the keyswitch note. Lower velocities will not trigger the keyswitch.")
set_control_par(get_ui_id($value_rule_keyswitch_velocity_range_min),$CONTROL_PAR_POS_X,365)
set_control_par(get_ui_id($value_rule_keyswitch_velocity_range_min),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_keyswitch_velocity_range_min),$CONTROL_PAR_WIDTH,35)
set_text($value_rule_keyswitch_velocity_range_min,"")
set_control_par_str(get_ui_id($label_rule_keyswitch_velocity_range_to),$CONTROL_PAR_TEXT,"to")
set_control_par_str(get_ui_id($label_rule_keyswitch_velocity_range_to),$CONTROL_PAR_PICTURE,0)
set_control_par(get_ui_id($label_rule_keyswitch_velocity_range_to),$CONTROL_PAR_TEXT_ALIGNMENT,1)
set_control_par(get_ui_id($label_rule_keyswitch_velocity_range_to),$CONTROL_PAR_POS_X,405)
set_control_par(get_ui_id($label_rule_keyswitch_velocity_range_to),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_rule_keyswitch_velocity_range_to),$CONTROL_PAR_WIDTH,25)
set_control_par_str(get_ui_id($value_rule_keyswitch_velocity_range_max),$CONTROL_PAR_HELP,"Maxinum velocity for the keyswitch note. Higher velocities will not trigger the keyswitch.")
set_control_par(get_ui_id($value_rule_keyswitch_velocity_range_max),$CONTROL_PAR_POS_X,435)
set_control_par(get_ui_id($value_rule_keyswitch_velocity_range_max),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_keyswitch_velocity_range_max),$CONTROL_PAR_WIDTH,35)
set_text($value_rule_keyswitch_velocity_range_max,"")
set_control_par_str(get_ui_id($value_rule_keyswitch_cc),$CONTROL_PAR_HELP,"The CC number that must be received on the group's keyswitch channel to trigger the keyswitch.")
set_control_par(get_ui_id($value_rule_keyswitch_cc),$CONTROL_PAR_POS_X,245)
set_control_par(get_ui_id($value_rule_keyswitch_cc),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_keyswitch_cc),$CONTROL_PAR_WIDTH,35)
set_text($value_rule_keyswitch_cc,"")
set_control_par_str(get_ui_id($label_rule_keyswitch_cc_value_range_from),$CONTROL_PAR_TEXT,"with values")
set_control_par_str(get_ui_id($label_rule_keyswitch_cc_value_range_from),$CONTROL_PAR_PICTURE,0)
set_control_par(get_ui_id($label_rule_keyswitch_cc_value_range_from),$CONTROL_PAR_TEXT_ALIGNMENT,1)
set_control_par(get_ui_id($label_rule_keyswitch_cc_value_range_from),$CONTROL_PAR_POS_X,285)
set_control_par(get_ui_id($label_rule_keyswitch_cc_value_range_from),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_rule_keyswitch_cc_value_range_from),$CONTROL_PAR_WIDTH,65)
set_control_par_str(get_ui_id($value_rule_keyswitch_cc_value_range_min),$CONTROL_PAR_HELP,"The minimum CC value that must be matched to trigger the keyswitch.")
set_control_par(get_ui_id($value_rule_keyswitch_cc_value_range_min),$CONTROL_PAR_POS_X,355)
set_control_par(get_ui_id($value_rule_keyswitch_cc_value_range_min),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_keyswitch_cc_value_range_min),$CONTROL_PAR_WIDTH,35)
set_text($value_rule_keyswitch_cc_value_range_min,"")
set_control_par_str(get_ui_id($label_rule_keyswitch_cc_value_range_to),$CONTROL_PAR_TEXT,"to")
set_control_par_str(get_ui_id($label_rule_keyswitch_cc_value_range_to),$CONTROL_PAR_PICTURE,0)
set_control_par(get_ui_id($label_rule_keyswitch_cc_value_range_to),$CONTROL_PAR_TEXT_ALIGNMENT,1)
set_control_par(get_ui_id($label_rule_keyswitch_cc_value_range_to),$CONTROL_PAR_POS_X,395)
set_control_par(get_ui_id($label_rule_keyswitch_cc_value_range_to),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_rule_keyswitch_cc_value_range_to),$CONTROL_PAR_WIDTH,25)
set_control_par_str(get_ui_id($value_rule_keyswitch_cc_value_range_max),$CONTROL_PAR_HELP,"The maximum CC value that must be matched to trigger the keyswitch.")
set_control_par(get_ui_id($value_rule_keyswitch_cc_value_range_max),$CONTROL_PAR_POS_X,425)
set_control_par(get_ui_id($value_rule_keyswitch_cc_value_range_max),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_keyswitch_cc_value_range_max),$CONTROL_PAR_WIDTH,35)
set_text($value_rule_keyswitch_cc_value_range_max,"")
set_control_par_str(get_ui_id($value_rule_keyswitch_program),$CONTROL_PAR_HELP,"The program change number that will trigger the keyswitch when received on the group's keyswitch channel.")
set_control_par(get_ui_id($value_rule_keyswitch_program),$CONTROL_PAR_POS_X,245)
set_control_par(get_ui_id($value_rule_keyswitch_program),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_keyswitch_program),$CONTROL_PAR_WIDTH,35)
set_text($value_rule_keyswitch_program,"")
$y := $y+20
set_control_par_str(get_ui_id($value_rule_timing),$CONTROL_PAR_HELP,"Timing feature")
set_text($label_rule_timing,"Timing")
set_control_par(get_ui_id($label_rule_timing),$CONTROL_PAR_POS_X,135)
set_control_par(get_ui_id($label_rule_timing),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_rule_timing),$CONTROL_PAR_WIDTH,55)
set_control_par(get_ui_id($label_rule_timing),$CONTROL_PAR_TEXT_ALIGNMENT,2)
set_control_par(get_ui_id($value_rule_timing),$CONTROL_PAR_POS_X,200)
set_control_par(get_ui_id($value_rule_timing),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_timing),$CONTROL_PAR_WIDTH,60)
set_text($value_rule_timing,"ms ")
$y := $y
set_control_par_str(get_ui_id($value_rule_timing_first_note),$CONTROL_PAR_HELP,"1st note Timing feature")
set_text($label_rule_timing_first_note,"1st note timing")
set_control_par(get_ui_id($label_rule_timing_first_note),$CONTROL_PAR_POS_X,270)
set_control_par(get_ui_id($label_rule_timing_first_note),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_rule_timing_first_note),$CONTROL_PAR_WIDTH,75)
set_control_par(get_ui_id($label_rule_timing_first_note),$CONTROL_PAR_TEXT_ALIGNMENT,2)
set_control_par(get_ui_id($value_rule_timing_first_note),$CONTROL_PAR_POS_X,350)
set_control_par(get_ui_id($value_rule_timing_first_note),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_timing_first_note),$CONTROL_PAR_WIDTH,60)
set_text($value_rule_timing_first_note,"ms ")
$y := $y+20
set_text($label_rule_keyswitch_transpose,"Transpose")
set_control_par(get_ui_id($label_rule_keyswitch_transpose),$CONTROL_PAR_POS_X,135)
set_control_par(get_ui_id($label_rule_keyswitch_transpose),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_rule_keyswitch_transpose),$CONTROL_PAR_WIDTH,55)
set_control_par(get_ui_id($label_rule_keyswitch_transpose),$CONTROL_PAR_TEXT_ALIGNMENT,2)
set_control_par(get_ui_id($value_rule_keyswitch_transpose),$CONTROL_PAR_POS_X,200)
set_control_par(get_ui_id($value_rule_keyswitch_transpose),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_keyswitch_transpose),$CONTROL_PAR_WIDTH,60)
set_control_par_str(get_ui_id($value_rule_keyswitch_transpose),$CONTROL_PAR_HELP,"Number of semitones to transpose incoming notes after the keyswitch is triggered.")
set_text($value_rule_keyswitch_transpose,"")
$y := $y+20
set_control_par_str(get_ui_id($menu_rule_keyswitch_source_channel),$CONTROL_PAR_HELP,"Override the group-default source channel. When this keyswitch is engaged, MIDI events on this channel will be routed to the target channel. Default means use the group default above.")
set_text($label_rule_keyswitch_source_channel,"Source")
set_control_par(get_ui_id($label_rule_keyswitch_source_channel),$CONTROL_PAR_POS_X,135)
set_control_par(get_ui_id($label_rule_keyswitch_source_channel),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_rule_keyswitch_source_channel),$CONTROL_PAR_WIDTH,55)
set_control_par(get_ui_id($label_rule_keyswitch_source_channel),$CONTROL_PAR_TEXT_ALIGNMENT,2)
set_control_par(get_ui_id($menu_rule_keyswitch_source_channel),$CONTROL_PAR_POS_X,200)
set_control_par(get_ui_id($menu_rule_keyswitch_source_channel),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($menu_rule_keyswitch_source_channel),$CONTROL_PAR_WIDTH,60)
add_menu_item($menu_rule_keyswitch_source_channel,"Default",0)
add_menu_item($menu_rule_keyswitch_source_channel,"Omni",-1)
$i := 1
while ($i<=16)
@name := !channel_names[$i-1]
add_menu_item($menu_rule_keyswitch_source_channel,@name,$i)
inc($i)
end while
$y := $y
set_control_par_str(get_ui_id($menu_rule_keyswitch_target_channel),$CONTROL_PAR_HELP,"Override the group-default target channel. When this keyswitch is engaged, MIDI events will be routed to this channel.  Null is a special case which blackholes all incoming MIDI events on the source channel when this keyswitch is active.")
set_text($label_rule_keyswitch_target_channel,"Target")
set_control_par(get_ui_id($label_rule_keyswitch_target_channel),$CONTROL_PAR_POS_X,270)
set_control_par(get_ui_id($label_rule_keyswitch_target_channel),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_rule_keyswitch_target_channel),$CONTROL_PAR_WIDTH,41)
set_control_par(get_ui_id($label_rule_keyswitch_target_channel),$CONTROL_PAR_TEXT_ALIGNMENT,2)
set_control_par(get_ui_id($menu_rule_keyswitch_target_channel),$CONTROL_PAR_POS_X,315)
set_control_par(get_ui_id($menu_rule_keyswitch_target_channel),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($menu_rule_keyswitch_target_channel),$CONTROL_PAR_WIDTH,60)
add_menu_item($menu_rule_keyswitch_target_channel,"Default",0)
add_menu_item($menu_rule_keyswitch_target_channel,"Null",-1)
$i := 1
while ($i<=64)
@name := !channel_names[$i-1]
add_menu_item($menu_rule_keyswitch_target_channel,@name,$i)
inc($i)
end while
$y := $y+20
set_text($label_rule_keyswitch_flags,"Options")
set_control_par(get_ui_id($label_rule_keyswitch_flags),$CONTROL_PAR_POS_X,135)
set_control_par(get_ui_id($label_rule_keyswitch_flags),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_rule_keyswitch_flags),$CONTROL_PAR_WIDTH,55)
set_control_par(get_ui_id($label_rule_keyswitch_flags),$CONTROL_PAR_TEXT_ALIGNMENT,2)
set_control_par_str(get_ui_id($switch_rule_keyswitch_flags_hold_notes),$CONTROL_PAR_HELP,"When enabled, note redirections (see keyswitch action) will be held until the next keyswitch activation. Useful for patches that engage functionality only while a particular note is pressed.")
set_text($switch_rule_keyswitch_flags_hold_notes,"Hold redirected notes until next keyswitch")
set_control_par(get_ui_id($switch_rule_keyswitch_flags_hold_notes),$CONTROL_PAR_POS_X,200)
set_control_par(get_ui_id($switch_rule_keyswitch_flags_hold_notes),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($switch_rule_keyswitch_flags_hold_notes),$CONTROL_PAR_WIDTH,200)
set_control_par(get_ui_id($switch_rule_keyswitch_flags_hold_notes),$CONTROL_PAR_TEXT_ALIGNMENT,1)
set_control_par_str(get_ui_id($switch_rule_keyswitch_flags_redirect_only),$CONTROL_PAR_HELP,"When enabled, triggering the keyswitch will not affect routing of subsequent MIDI events, which is useful for processing redirections only, or blocking keyswitches.")
set_text($switch_rule_keyswitch_flags_redirect_only,"Ignore routing")
set_control_par(get_ui_id($switch_rule_keyswitch_flags_redirect_only),$CONTROL_PAR_POS_X,410)
set_control_par(get_ui_id($switch_rule_keyswitch_flags_redirect_only),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($switch_rule_keyswitch_flags_redirect_only),$CONTROL_PAR_WIDTH,80)
set_control_par(get_ui_id($switch_rule_keyswitch_flags_redirect_only),$CONTROL_PAR_TEXT_ALIGNMENT,1)
$y := $y+20
set_text($label_rule_keyswitch_action,"KS Action")
set_control_par(get_ui_id($label_rule_keyswitch_action),$CONTROL_PAR_POS_X,135)
set_control_par(get_ui_id($label_rule_keyswitch_action),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_rule_keyswitch_action),$CONTROL_PAR_WIDTH,55)
set_control_par(get_ui_id($label_rule_keyswitch_action),$CONTROL_PAR_TEXT_ALIGNMENT,2)
set_control_par_str(get_ui_id($menu_rule_keyswitch_action),$CONTROL_PAR_HELP,"Defines the action to take when the keyswitch is triggered. Block prevents the keyswitch from reaching the target channel. Passthrough will route the keyswitch as-is to the target. Redirect allows user-customizable translation to the target.")
set_control_par(get_ui_id($menu_rule_keyswitch_action),$CONTROL_PAR_POS_X,200)
set_control_par(get_ui_id($menu_rule_keyswitch_action),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($menu_rule_keyswitch_action),$CONTROL_PAR_WIDTH,80)
add_menu_item($menu_rule_keyswitch_action,"Block",$KEYSWITCH_ACTION_BLOCK)
add_menu_item($menu_rule_keyswitch_action,"Passthrough",$KEYSWITCH_ACTION_PASSTHROUGH)
add_menu_item($menu_rule_keyswitch_action,"Redirect",$KEYSWITCH_ACTION_REDIRECT)
set_control_par_str(get_ui_id($label_rule_keyswitch_redirect_to),$CONTROL_PAR_TEXT,"to")
set_control_par_str(get_ui_id($label_rule_keyswitch_redirect_to),$CONTROL_PAR_PICTURE,0)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_to),$CONTROL_PAR_TEXT_ALIGNMENT,1)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_to),$CONTROL_PAR_POS_X,285)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_to),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_to),$CONTROL_PAR_WIDTH,25)
if (0>0)
set_control_par_str(get_ui_id($button_rule_keyswitch_addremove0),$CONTROL_PAR_HELP,"Add or remove a redirection target")
set_control_par_str(%button_rule_keyswitch_addremove[0],$CONTROL_PAR_TEXT,"+")
set_control_par(%button_rule_keyswitch_addremove[0],$CONTROL_PAR_TEXT_ALIGNMENT,1)
set_control_par(%button_rule_keyswitch_addremove[0],$CONTROL_PAR_POS_X,285)
set_control_par(%button_rule_keyswitch_addremove[0],$CONTROL_PAR_POS_Y,$y)
set_control_par(%button_rule_keyswitch_addremove[0],$CONTROL_PAR_WIDTH,25)
end if
set_control_par_str(get_ui_id($menu_rule_keyswitch_redirect_type0),$CONTROL_PAR_HELP,"Defines the type of MIDI event the keyswitch will be redirected to. Either a note, CC event, or program change.")
set_control_par(%menu_rule_keyswitch_redirect_type[0],$CONTROL_PAR_POS_X,315)
set_control_par(%menu_rule_keyswitch_redirect_type[0],$CONTROL_PAR_POS_Y,$y)
set_control_par(%menu_rule_keyswitch_redirect_type[0],$CONTROL_PAR_WIDTH,40)
add_menu_item($menu_rule_keyswitch_redirect_type0,"Key",0)
add_menu_item($menu_rule_keyswitch_redirect_type0,"CC",1)
add_menu_item($menu_rule_keyswitch_redirect_type0,"Prog",2)
set_control_par_str(get_ui_id($value_rule_keyswitch_redirect_key0),$CONTROL_PAR_HELP,"The note the keyswitch will send to the target channel.")
set_control_par(get_ui_id($value_rule_keyswitch_redirect_key0),$CONTROL_PAR_POS_X,360)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_key0),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_key0),$CONTROL_PAR_WIDTH,40)
set_text($value_rule_keyswitch_redirect_key0,"")
set_control_par_str(get_ui_id($value_rule_keyswitch_redirect_key_velocity0),$CONTROL_PAR_HELP,"The velocity of the note.")
set_text($label_rule_keyswitch_redirect_key_velocity0,"Velocity")
set_control_par(get_ui_id($label_rule_keyswitch_redirect_key_velocity0),$CONTROL_PAR_POS_X,400)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_key_velocity0),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_key_velocity0),$CONTROL_PAR_WIDTH,45)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_key_velocity0),$CONTROL_PAR_TEXT_ALIGNMENT,2)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_key_velocity0),$CONTROL_PAR_TEXT_ALIGNMENT,1)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_key_velocity0),$CONTROL_PAR_POS_X,445)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_key_velocity0),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_key_velocity0),$CONTROL_PAR_WIDTH,35)
set_text($value_rule_keyswitch_redirect_key_velocity0,"")
set_control_par_str(get_ui_id($value_rule_keyswitch_redirect_cc0),$CONTROL_PAR_HELP,"The CC number of the redirected MIDI event.")
set_control_par(get_ui_id($value_rule_keyswitch_redirect_cc0),$CONTROL_PAR_POS_X,360)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_cc0),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_cc0),$CONTROL_PAR_WIDTH,35)
set_text($value_rule_keyswitch_redirect_cc0,"")
set_text($label_rule_keyswitch_redirect_cc_slash0,"/")
set_control_par(get_ui_id($label_rule_keyswitch_redirect_cc_slash0),$CONTROL_PAR_POS_X,395)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_cc_slash0),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_cc_slash0),$CONTROL_PAR_WIDTH,15)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_cc_slash0),$CONTROL_PAR_TEXT_ALIGNMENT,2)
set_control_par_str(get_ui_id($value_rule_keyswitch_redirect_cc_value0),$CONTROL_PAR_HELP,"The CC value of the redirected MIDI event.")
set_control_par(get_ui_id($value_rule_keyswitch_redirect_cc_value0),$CONTROL_PAR_POS_X,410)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_cc_value0),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_cc_value0),$CONTROL_PAR_WIDTH,35)
set_text($value_rule_keyswitch_redirect_cc_value0,"")
set_control_par_str(get_ui_id($value_rule_keyswitch_redirect_program0),$CONTROL_PAR_HELP,"The program change number to send to the target channel.")
set_control_par(get_ui_id($value_rule_keyswitch_redirect_program0),$CONTROL_PAR_POS_X,360)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_program0),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_program0),$CONTROL_PAR_WIDTH,35)
set_text($value_rule_keyswitch_redirect_program0,"")
set_control_par_str(get_ui_id($button_rule_keyswitch_redirect_midi_learn0),$CONTROL_PAR_HELP,"MIDI learn a redirection event.")
set_text($button_rule_keyswitch_redirect_midi_learn0,"MIDI Learn")
set_control_par(get_ui_id($button_rule_keyswitch_redirect_midi_learn0),$CONTROL_PAR_POS_X,485)
set_control_par(get_ui_id($button_rule_keyswitch_redirect_midi_learn0),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($button_rule_keyswitch_redirect_midi_learn0),$CONTROL_PAR_WIDTH,60)
$y := $y+20
if (1>0)
set_control_par_str(get_ui_id($button_rule_keyswitch_addremove1),$CONTROL_PAR_HELP,"Add or remove a redirection target")
set_control_par_str(%button_rule_keyswitch_addremove[1],$CONTROL_PAR_TEXT,"+")
set_control_par(%button_rule_keyswitch_addremove[1],$CONTROL_PAR_TEXT_ALIGNMENT,1)
set_control_par(%button_rule_keyswitch_addremove[1],$CONTROL_PAR_POS_X,285)
set_control_par(%button_rule_keyswitch_addremove[1],$CONTROL_PAR_POS_Y,$y)
set_control_par(%button_rule_keyswitch_addremove[1],$CONTROL_PAR_WIDTH,25)
end if
set_control_par_str(get_ui_id($menu_rule_keyswitch_redirect_type1),$CONTROL_PAR_HELP,"Defines the type of MIDI event the keyswitch will be redirected to. Either a note, CC event, or program change.")
set_control_par(%menu_rule_keyswitch_redirect_type[1],$CONTROL_PAR_POS_X,315)
set_control_par(%menu_rule_keyswitch_redirect_type[1],$CONTROL_PAR_POS_Y,$y)
set_control_par(%menu_rule_keyswitch_redirect_type[1],$CONTROL_PAR_WIDTH,40)
add_menu_item($menu_rule_keyswitch_redirect_type1,"Key",0)
add_menu_item($menu_rule_keyswitch_redirect_type1,"CC",1)
add_menu_item($menu_rule_keyswitch_redirect_type1,"Prog",2)
set_control_par_str(get_ui_id($value_rule_keyswitch_redirect_key1),$CONTROL_PAR_HELP,"The note the keyswitch will send to the target channel.")
set_control_par(get_ui_id($value_rule_keyswitch_redirect_key1),$CONTROL_PAR_POS_X,360)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_key1),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_key1),$CONTROL_PAR_WIDTH,40)
set_text($value_rule_keyswitch_redirect_key1,"")
set_control_par_str(get_ui_id($value_rule_keyswitch_redirect_key_velocity1),$CONTROL_PAR_HELP,"The velocity of the note.")
set_text($label_rule_keyswitch_redirect_key_velocity1,"Velocity")
set_control_par(get_ui_id($label_rule_keyswitch_redirect_key_velocity1),$CONTROL_PAR_POS_X,400)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_key_velocity1),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_key_velocity1),$CONTROL_PAR_WIDTH,45)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_key_velocity1),$CONTROL_PAR_TEXT_ALIGNMENT,2)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_key_velocity1),$CONTROL_PAR_TEXT_ALIGNMENT,1)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_key_velocity1),$CONTROL_PAR_POS_X,445)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_key_velocity1),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_key_velocity1),$CONTROL_PAR_WIDTH,35)
set_text($value_rule_keyswitch_redirect_key_velocity1,"")
set_control_par_str(get_ui_id($value_rule_keyswitch_redirect_cc1),$CONTROL_PAR_HELP,"The CC number of the redirected MIDI event.")
set_control_par(get_ui_id($value_rule_keyswitch_redirect_cc1),$CONTROL_PAR_POS_X,360)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_cc1),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_cc1),$CONTROL_PAR_WIDTH,35)
set_text($value_rule_keyswitch_redirect_cc1,"")
set_text($label_rule_keyswitch_redirect_cc_slash1,"/")
set_control_par(get_ui_id($label_rule_keyswitch_redirect_cc_slash1),$CONTROL_PAR_POS_X,395)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_cc_slash1),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_cc_slash1),$CONTROL_PAR_WIDTH,15)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_cc_slash1),$CONTROL_PAR_TEXT_ALIGNMENT,2)
set_control_par_str(get_ui_id($value_rule_keyswitch_redirect_cc_value1),$CONTROL_PAR_HELP,"The CC value of the redirected MIDI event.")
set_control_par(get_ui_id($value_rule_keyswitch_redirect_cc_value1),$CONTROL_PAR_POS_X,410)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_cc_value1),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_cc_value1),$CONTROL_PAR_WIDTH,35)
set_text($value_rule_keyswitch_redirect_cc_value1,"")
set_control_par_str(get_ui_id($value_rule_keyswitch_redirect_program1),$CONTROL_PAR_HELP,"The program change number to send to the target channel.")
set_control_par(get_ui_id($value_rule_keyswitch_redirect_program1),$CONTROL_PAR_POS_X,360)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_program1),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_program1),$CONTROL_PAR_WIDTH,35)
set_text($value_rule_keyswitch_redirect_program1,"")
set_control_par_str(get_ui_id($button_rule_keyswitch_redirect_midi_learn1),$CONTROL_PAR_HELP,"MIDI learn a redirection event.")
set_text($button_rule_keyswitch_redirect_midi_learn1,"MIDI Learn")
set_control_par(get_ui_id($button_rule_keyswitch_redirect_midi_learn1),$CONTROL_PAR_POS_X,485)
set_control_par(get_ui_id($button_rule_keyswitch_redirect_midi_learn1),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($button_rule_keyswitch_redirect_midi_learn1),$CONTROL_PAR_WIDTH,60)
$y := $y+20
if (2>0)
set_control_par_str(get_ui_id($button_rule_keyswitch_addremove2),$CONTROL_PAR_HELP,"Add or remove a redirection target")
set_control_par_str(%button_rule_keyswitch_addremove[2],$CONTROL_PAR_TEXT,"+")
set_control_par(%button_rule_keyswitch_addremove[2],$CONTROL_PAR_TEXT_ALIGNMENT,1)
set_control_par(%button_rule_keyswitch_addremove[2],$CONTROL_PAR_POS_X,285)
set_control_par(%button_rule_keyswitch_addremove[2],$CONTROL_PAR_POS_Y,$y)
set_control_par(%button_rule_keyswitch_addremove[2],$CONTROL_PAR_WIDTH,25)
end if
set_control_par_str(get_ui_id($menu_rule_keyswitch_redirect_type2),$CONTROL_PAR_HELP,"Defines the type of MIDI event the keyswitch will be redirected to. Either a note, CC event, or program change.")
set_control_par(%menu_rule_keyswitch_redirect_type[2],$CONTROL_PAR_POS_X,315)
set_control_par(%menu_rule_keyswitch_redirect_type[2],$CONTROL_PAR_POS_Y,$y)
set_control_par(%menu_rule_keyswitch_redirect_type[2],$CONTROL_PAR_WIDTH,40)
add_menu_item($menu_rule_keyswitch_redirect_type2,"Key",0)
add_menu_item($menu_rule_keyswitch_redirect_type2,"CC",1)
add_menu_item($menu_rule_keyswitch_redirect_type2,"Prog",2)
set_control_par_str(get_ui_id($value_rule_keyswitch_redirect_key2),$CONTROL_PAR_HELP,"The note the keyswitch will send to the target channel.")
set_control_par(get_ui_id($value_rule_keyswitch_redirect_key2),$CONTROL_PAR_POS_X,360)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_key2),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_key2),$CONTROL_PAR_WIDTH,40)
set_text($value_rule_keyswitch_redirect_key2,"")
set_control_par_str(get_ui_id($value_rule_keyswitch_redirect_key_velocity2),$CONTROL_PAR_HELP,"The velocity of the note.")
set_text($label_rule_keyswitch_redirect_key_velocity2,"Velocity")
set_control_par(get_ui_id($label_rule_keyswitch_redirect_key_velocity2),$CONTROL_PAR_POS_X,400)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_key_velocity2),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_key_velocity2),$CONTROL_PAR_WIDTH,45)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_key_velocity2),$CONTROL_PAR_TEXT_ALIGNMENT,2)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_key_velocity2),$CONTROL_PAR_TEXT_ALIGNMENT,1)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_key_velocity2),$CONTROL_PAR_POS_X,445)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_key_velocity2),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_key_velocity2),$CONTROL_PAR_WIDTH,35)
set_text($value_rule_keyswitch_redirect_key_velocity2,"")
set_control_par_str(get_ui_id($value_rule_keyswitch_redirect_cc2),$CONTROL_PAR_HELP,"The CC number of the redirected MIDI event.")
set_control_par(get_ui_id($value_rule_keyswitch_redirect_cc2),$CONTROL_PAR_POS_X,360)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_cc2),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_cc2),$CONTROL_PAR_WIDTH,35)
set_text($value_rule_keyswitch_redirect_cc2,"")
set_text($label_rule_keyswitch_redirect_cc_slash2,"/")
set_control_par(get_ui_id($label_rule_keyswitch_redirect_cc_slash2),$CONTROL_PAR_POS_X,395)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_cc_slash2),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_cc_slash2),$CONTROL_PAR_WIDTH,15)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_cc_slash2),$CONTROL_PAR_TEXT_ALIGNMENT,2)
set_control_par_str(get_ui_id($value_rule_keyswitch_redirect_cc_value2),$CONTROL_PAR_HELP,"The CC value of the redirected MIDI event.")
set_control_par(get_ui_id($value_rule_keyswitch_redirect_cc_value2),$CONTROL_PAR_POS_X,410)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_cc_value2),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_cc_value2),$CONTROL_PAR_WIDTH,35)
set_text($value_rule_keyswitch_redirect_cc_value2,"")
set_control_par_str(get_ui_id($value_rule_keyswitch_redirect_program2),$CONTROL_PAR_HELP,"The program change number to send to the target channel.")
set_control_par(get_ui_id($value_rule_keyswitch_redirect_program2),$CONTROL_PAR_POS_X,360)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_program2),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_program2),$CONTROL_PAR_WIDTH,35)
set_text($value_rule_keyswitch_redirect_program2,"")
set_control_par_str(get_ui_id($button_rule_keyswitch_redirect_midi_learn2),$CONTROL_PAR_HELP,"MIDI learn a redirection event.")
set_text($button_rule_keyswitch_redirect_midi_learn2,"MIDI Learn")
set_control_par(get_ui_id($button_rule_keyswitch_redirect_midi_learn2),$CONTROL_PAR_POS_X,485)
set_control_par(get_ui_id($button_rule_keyswitch_redirect_midi_learn2),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($button_rule_keyswitch_redirect_midi_learn2),$CONTROL_PAR_WIDTH,60)
$y := $y+20
if (3>0)
set_control_par_str(get_ui_id($button_rule_keyswitch_addremove3),$CONTROL_PAR_HELP,"Add or remove a redirection target")
set_control_par_str(%button_rule_keyswitch_addremove[3],$CONTROL_PAR_TEXT,"+")
set_control_par(%button_rule_keyswitch_addremove[3],$CONTROL_PAR_TEXT_ALIGNMENT,1)
set_control_par(%button_rule_keyswitch_addremove[3],$CONTROL_PAR_POS_X,285)
set_control_par(%button_rule_keyswitch_addremove[3],$CONTROL_PAR_POS_Y,$y)
set_control_par(%button_rule_keyswitch_addremove[3],$CONTROL_PAR_WIDTH,25)
end if
set_control_par_str(get_ui_id($menu_rule_keyswitch_redirect_type3),$CONTROL_PAR_HELP,"Defines the type of MIDI event the keyswitch will be redirected to. Either a note, CC event, or program change.")
set_control_par(%menu_rule_keyswitch_redirect_type[3],$CONTROL_PAR_POS_X,315)
set_control_par(%menu_rule_keyswitch_redirect_type[3],$CONTROL_PAR_POS_Y,$y)
set_control_par(%menu_rule_keyswitch_redirect_type[3],$CONTROL_PAR_WIDTH,40)
add_menu_item($menu_rule_keyswitch_redirect_type3,"Key",0)
add_menu_item($menu_rule_keyswitch_redirect_type3,"CC",1)
add_menu_item($menu_rule_keyswitch_redirect_type3,"Prog",2)
set_control_par_str(get_ui_id($value_rule_keyswitch_redirect_key3),$CONTROL_PAR_HELP,"The note the keyswitch will send to the target channel.")
set_control_par(get_ui_id($value_rule_keyswitch_redirect_key3),$CONTROL_PAR_POS_X,360)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_key3),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_key3),$CONTROL_PAR_WIDTH,40)
set_text($value_rule_keyswitch_redirect_key3,"")
set_control_par_str(get_ui_id($value_rule_keyswitch_redirect_key_velocity3),$CONTROL_PAR_HELP,"The velocity of the note.")
set_text($label_rule_keyswitch_redirect_key_velocity3,"Velocity")
set_control_par(get_ui_id($label_rule_keyswitch_redirect_key_velocity3),$CONTROL_PAR_POS_X,400)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_key_velocity3),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_key_velocity3),$CONTROL_PAR_WIDTH,45)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_key_velocity3),$CONTROL_PAR_TEXT_ALIGNMENT,2)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_key_velocity3),$CONTROL_PAR_TEXT_ALIGNMENT,1)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_key_velocity3),$CONTROL_PAR_POS_X,445)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_key_velocity3),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_key_velocity3),$CONTROL_PAR_WIDTH,35)
set_text($value_rule_keyswitch_redirect_key_velocity3,"")
set_control_par_str(get_ui_id($value_rule_keyswitch_redirect_cc3),$CONTROL_PAR_HELP,"The CC number of the redirected MIDI event.")
set_control_par(get_ui_id($value_rule_keyswitch_redirect_cc3),$CONTROL_PAR_POS_X,360)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_cc3),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_cc3),$CONTROL_PAR_WIDTH,35)
set_text($value_rule_keyswitch_redirect_cc3,"")
set_text($label_rule_keyswitch_redirect_cc_slash3,"/")
set_control_par(get_ui_id($label_rule_keyswitch_redirect_cc_slash3),$CONTROL_PAR_POS_X,395)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_cc_slash3),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_cc_slash3),$CONTROL_PAR_WIDTH,15)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_cc_slash3),$CONTROL_PAR_TEXT_ALIGNMENT,2)
set_control_par_str(get_ui_id($value_rule_keyswitch_redirect_cc_value3),$CONTROL_PAR_HELP,"The CC value of the redirected MIDI event.")
set_control_par(get_ui_id($value_rule_keyswitch_redirect_cc_value3),$CONTROL_PAR_POS_X,410)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_cc_value3),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_cc_value3),$CONTROL_PAR_WIDTH,35)
set_text($value_rule_keyswitch_redirect_cc_value3,"")
set_control_par_str(get_ui_id($value_rule_keyswitch_redirect_program3),$CONTROL_PAR_HELP,"The program change number to send to the target channel.")
set_control_par(get_ui_id($value_rule_keyswitch_redirect_program3),$CONTROL_PAR_POS_X,360)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_program3),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($value_rule_keyswitch_redirect_program3),$CONTROL_PAR_WIDTH,35)
set_text($value_rule_keyswitch_redirect_program3,"")
set_control_par_str(get_ui_id($button_rule_keyswitch_redirect_midi_learn3),$CONTROL_PAR_HELP,"MIDI learn a redirection event.")
set_text($button_rule_keyswitch_redirect_midi_learn3,"MIDI Learn")
set_control_par(get_ui_id($button_rule_keyswitch_redirect_midi_learn3),$CONTROL_PAR_POS_X,485)
set_control_par(get_ui_id($button_rule_keyswitch_redirect_midi_learn3),$CONTROL_PAR_POS_Y,$y)
set_control_par(get_ui_id($button_rule_keyswitch_redirect_midi_learn3),$CONTROL_PAR_WIDTH,60)
$y := $y+20
set_control_par(%button_rule_keyswitch_addremove[0],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
$y := $y-80
read_persistent_var($menu_rules)
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
@text_rule_name := !rules___name[$rule]
$menu_global_cc_hanging := %global_config[$GLOBAL_CONFIG_CC_HANGING]
$menu_rule_keyswitch_channel := %rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_KEYSWITCH_CHANNEL]
$menu_rule_source_channel := %rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_SOURCE_CHANNEL]
$menu_rule_target_channel := %rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_TARGET_CHANNEL]
$menu_rule_cc_chasing := %rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_CC_CHASING]
if ($menu_rule_cc_chasing=2)
set_text($label_rule_cc_chasing_info,"Chases CCs 1, 2, 11, 64-69")
else
set_text($label_rule_cc_chasing_info,"")
end if
$button_rule_bypass := 1-%rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_ENABLED]
$menu_keyswitches := 0
$i := 0
while ($i<$MAX_KEYSWITCHES_PER_RULE)
$ks := %rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$i]
if ($ks # $KEYSWITCH_UNDEFINED)
if ($ks<0 or ($ks=$KEYSWITCH_UNDEFINED))
@name := "Undefined"
else
if ($ks<128)
@name := !note_names[$ks]
if (%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] # $VELOCITY_RANGE_DEFAULT)
@name := @name & "   vel " & (%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 255) & "-" & (sh_right(%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE],8) .and. 255)
end if
else
if ($ks<256)
@name := "Prog " & ($ks mod 127)
else
@name := "CC" & ($ks/128-128) & " / " & (%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 255)
if (%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 255 # (sh_right(%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE],8) .and. 255))
@name := @name & "-" & (sh_right(%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE],8) .and. 255)
end if
end if
end if
end if
set_menu_item_str(get_ui_id($menu_keyswitches),$i,@name)
set_menu_item_visibility(get_ui_id($menu_keyswitches),$i,1)
else
set_menu_item_str(get_ui_id($menu_keyswitches),$i,"<empty>")
if ($i>0)
set_menu_item_visibility(get_ui_id($menu_keyswitches),$i,0)
end if
end if
inc($i)
end while
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$count := 0
while (%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$count] # $KEYSWITCH_UNDEFINED)
inc($count)
end while
if ($count>0)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
$ks := %rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$idx]
$action := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_ACTION]
$flag := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_FLAGS]
if ($ks # $KEYSWITCH_UNDEFINED)
if ($ks<128)
$value_rule_keyswitch_velocity_range_min := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 255
$value_rule_keyswitch_velocity_range_max := sh_right(%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE],8) .and. 255
else
if ($ks>(128*128))
$value_rule_keyswitch_cc_value_range_min := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 255
$value_rule_keyswitch_cc_value_range_max := sh_right(%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE],8) .and. 255
end if
end if
$menu_rule_keyswitch_source_channel := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_SOURCE_CHANNEL]
$menu_rule_keyswitch_target_channel := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_TARGET_CHANNEL]
$value_rule_keyswitch_transpose := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_TRANSPOSE]
$value_rule_timing := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING]
$value_rule_timing_first_note := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING_FIRST_NOTE]
$switch_rule_keyswitch_flags_hold_notes := $flag .and. $KEYSWITCH_FLAG_HOLD_NOTES
$switch_rule_keyswitch_flags_redirect_only := $flag .and. $KEYSWITCH_FLAG_IGNORE_ROUTING
end if
declare %_params[9]
$j := 0
while ($j<=8)
%_params[$j] := $HIDE_WHOLE_CONTROL
inc($j)
end while
if ($ks # $KEYSWITCH_UNDEFINED)
%_params[0] := $HIDE_PART_NOTHING
%_params[4] := $HIDE_PART_BG
if ($ks<128)
%_params[1] := $HIDE_PART_NOTHING
else
if ($ks<256)
%_params[3] := $HIDE_PART_NOTHING
else
%_params[2] := $HIDE_PART_NOTHING
end if
end if
end if
set_control_par(get_ui_id($label_rule_keyswitch),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($menu_rule_keyswitch_type),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($label_rule_keyswitch_action),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($menu_rule_keyswitch_action),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($value_rule_keyswitch_key),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($label_rule_keyswitch_velocity_range_from),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($value_rule_keyswitch_velocity_range_min),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($label_rule_keyswitch_velocity_range_to),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($value_rule_keyswitch_velocity_range_max),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($value_rule_keyswitch_cc),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($label_rule_keyswitch_cc_value_range_from),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($value_rule_keyswitch_cc_value_range_min),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($label_rule_keyswitch_cc_value_range_to),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($value_rule_keyswitch_cc_value_range_max),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($value_rule_keyswitch_program),$CONTROL_PAR_HIDE,%_params[3])
set_control_par(get_ui_id($label_rule_keyswitch_source_channel),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($menu_rule_keyswitch_source_channel),$CONTROL_PAR_HIDE,%_params[4])
set_control_par(get_ui_id($label_rule_keyswitch_target_channel),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($menu_rule_keyswitch_target_channel),$CONTROL_PAR_HIDE,%_params[4])
set_control_par(get_ui_id($label_rule_keyswitch_flags),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($label_rule_timing),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($value_rule_timing),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($label_rule_timing_first_note),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($value_rule_timing_first_note),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($switch_rule_keyswitch_flags_hold_notes),$CONTROL_PAR_HIDE,%_params[4])
set_control_par(get_ui_id($switch_rule_keyswitch_flags_redirect_only),$CONTROL_PAR_HIDE,%_params[4])
set_control_par(get_ui_id($label_rule_keyswitch_transpose),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($value_rule_keyswitch_transpose),$CONTROL_PAR_HIDE,%_params[0])
$i := 0
while ($i<4)
$j := 0
while ($j<=8)
%_params[$j] := $HIDE_WHOLE_CONTROL
inc($j)
end while
$evcode := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+$i] .and. 65535
if ($action=$KEYSWITCH_ACTION_REDIRECT)
if ($evcode # $KEYSWITCH_UNDEFINED)
%_params[0] := $HIDE_PART_NOTHING
if ($evcode<128)
%_params[1] := $HIDE_PART_NOTHING
else
if ($evcode<256)
%_params[3] := $HIDE_PART_NOTHING
else
%_params[2] := $HIDE_PART_NOTHING
end if
end if
end if
end if
if ($i=0)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_to),$CONTROL_PAR_HIDE,%_params[0])
else
if ($evcode # $KEYSWITCH_UNDEFINED and ($action=$KEYSWITCH_ACTION_REDIRECT))
set_control_par_str(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_TEXT,"-")
set_control_par(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
else
set_control_par_str(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_TEXT,"+")
if (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+($i-1)] .and. 65535 # $KEYSWITCH_UNDEFINED and ($action=$KEYSWITCH_ACTION_REDIRECT))
set_control_par(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
else
set_control_par(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
end if
end if
end if
set_control_par(%menu_rule_keyswitch_redirect_type[$i],$CONTROL_PAR_HIDE,%_params[0])
set_control_par(%value_rule_keyswitch_redirect_key[$i],$CONTROL_PAR_HIDE,%_params[1])
set_control_par(%label_rule_keyswitch_redirect_key_velocity[$i],$CONTROL_PAR_HIDE,%_params[1])
set_control_par(%value_rule_keyswitch_redirect_key_velocity[$i],$CONTROL_PAR_HIDE,%_params[1])
set_control_par(%value_rule_keyswitch_redirect_cc[$i],$CONTROL_PAR_HIDE,%_params[2])
set_control_par(%label_rule_keyswitch_redirect_cc_slash[$i],$CONTROL_PAR_HIDE,%_params[2])
set_control_par(%value_rule_keyswitch_redirect_cc_value[$i],$CONTROL_PAR_HIDE,%_params[2])
set_control_par(%value_rule_keyswitch_redirect_program[$i],$CONTROL_PAR_HIDE,%_params[3])
set_control_par(%button_rule_keyswitch_redirect_midi_learn[$i],$CONTROL_PAR_HIDE,%_params[0])
inc($i)
end while
if ($ks<128)
$menu_rule_keyswitch_type := 0
$value_rule_keyswitch_key := $ks
else
if ($ks<256)
$menu_rule_keyswitch_type := 2
$value_rule_keyswitch_program := $ks-127
else
if ($ks # $KEYSWITCH_UNDEFINED)
$menu_rule_keyswitch_type := 1
$value_rule_keyswitch_cc := $ks/128-128
end if
end if
end if
$menu_rule_keyswitch_action := $action
if ($action=$KEYSWITCH_ACTION_REDIRECT)
$evcode := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. 65535
if ($evcode<128)
$velocity := sh_right(%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0],16) .and. 255
$value_rule_keyswitch_redirect_key0 := $evcode
$menu_rule_keyswitch_redirect_type0 := 0
$value_rule_keyswitch_redirect_key_velocity0 := $velocity
else
if ($evcode<256)
$menu_rule_keyswitch_redirect_type0 := 2
$value_rule_keyswitch_redirect_program0 := $evcode-128
else
if ($evcode # $KEYSWITCH_UNDEFINED)
$menu_rule_keyswitch_redirect_type0 := 1
$value_rule_keyswitch_redirect_cc0 := $evcode/128-128
$value_rule_keyswitch_redirect_cc_value0 := $evcode mod 128
end if
end if
end if
$evcode := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+1] .and. 65535
if ($evcode<128)
$velocity := sh_right(%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+1],16) .and. 255
$value_rule_keyswitch_redirect_key1 := $evcode
$menu_rule_keyswitch_redirect_type1 := 0
$value_rule_keyswitch_redirect_key_velocity1 := $velocity
else
if ($evcode<256)
$menu_rule_keyswitch_redirect_type1 := 2
$value_rule_keyswitch_redirect_program1 := $evcode-128
else
if ($evcode # $KEYSWITCH_UNDEFINED)
$menu_rule_keyswitch_redirect_type1 := 1
$value_rule_keyswitch_redirect_cc1 := $evcode/128-128
$value_rule_keyswitch_redirect_cc_value1 := $evcode mod 128
end if
end if
end if
$evcode := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+2] .and. 65535
if ($evcode<128)
$velocity := sh_right(%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+2],16) .and. 255
$value_rule_keyswitch_redirect_key2 := $evcode
$menu_rule_keyswitch_redirect_type2 := 0
$value_rule_keyswitch_redirect_key_velocity2 := $velocity
else
if ($evcode<256)
$menu_rule_keyswitch_redirect_type2 := 2
$value_rule_keyswitch_redirect_program2 := $evcode-128
else
if ($evcode # $KEYSWITCH_UNDEFINED)
$menu_rule_keyswitch_redirect_type2 := 1
$value_rule_keyswitch_redirect_cc2 := $evcode/128-128
$value_rule_keyswitch_redirect_cc_value2 := $evcode mod 128
end if
end if
end if
$evcode := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+3] .and. 65535
if ($evcode<128)
$velocity := sh_right(%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+3],16) .and. 255
$value_rule_keyswitch_redirect_key3 := $evcode
$menu_rule_keyswitch_redirect_type3 := 0
$value_rule_keyswitch_redirect_key_velocity3 := $velocity
else
if ($evcode<256)
$menu_rule_keyswitch_redirect_type3 := 2
$value_rule_keyswitch_redirect_program3 := $evcode-128
else
if ($evcode # $KEYSWITCH_UNDEFINED)
$menu_rule_keyswitch_redirect_type3 := 1
$value_rule_keyswitch_redirect_cc3 := $evcode/128-128
$value_rule_keyswitch_redirect_cc_value3 := $evcode mod 128
end if
end if
end if
end if
else
$j := 0
while ($j<=8)
%_params[$j] := $HIDE_WHOLE_CONTROL
inc($j)
end while
if ($KEYSWITCH_UNDEFINED # $KEYSWITCH_UNDEFINED)
%_params[0] := $HIDE_PART_NOTHING
%_params[4] := $HIDE_PART_BG
if ($KEYSWITCH_UNDEFINED<128)
%_params[1] := $HIDE_PART_NOTHING
else
if ($KEYSWITCH_UNDEFINED<256)
%_params[3] := $HIDE_PART_NOTHING
else
%_params[2] := $HIDE_PART_NOTHING
end if
end if
end if
set_control_par(get_ui_id($label_rule_keyswitch),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($menu_rule_keyswitch_type),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($label_rule_keyswitch_action),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($menu_rule_keyswitch_action),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($value_rule_keyswitch_key),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($label_rule_keyswitch_velocity_range_from),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($value_rule_keyswitch_velocity_range_min),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($label_rule_keyswitch_velocity_range_to),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($value_rule_keyswitch_velocity_range_max),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($value_rule_keyswitch_cc),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($label_rule_keyswitch_cc_value_range_from),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($value_rule_keyswitch_cc_value_range_min),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($label_rule_keyswitch_cc_value_range_to),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($value_rule_keyswitch_cc_value_range_max),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($value_rule_keyswitch_program),$CONTROL_PAR_HIDE,%_params[3])
set_control_par(get_ui_id($label_rule_keyswitch_source_channel),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($menu_rule_keyswitch_source_channel),$CONTROL_PAR_HIDE,%_params[4])
set_control_par(get_ui_id($label_rule_keyswitch_target_channel),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($menu_rule_keyswitch_target_channel),$CONTROL_PAR_HIDE,%_params[4])
set_control_par(get_ui_id($label_rule_keyswitch_flags),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($label_rule_timing),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($value_rule_timing),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($label_rule_timing_first_note),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($value_rule_timing_first_note),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($switch_rule_keyswitch_flags_hold_notes),$CONTROL_PAR_HIDE,%_params[4])
set_control_par(get_ui_id($switch_rule_keyswitch_flags_redirect_only),$CONTROL_PAR_HIDE,%_params[4])
set_control_par(get_ui_id($label_rule_keyswitch_transpose),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($value_rule_keyswitch_transpose),$CONTROL_PAR_HIDE,%_params[0])
$i := 0
while ($i<4)
$j := 0
while ($j<=8)
%_params[$j] := $HIDE_WHOLE_CONTROL
inc($j)
end while
$evcode := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+(0*$MAX_REDIRECTS_PER_KEYSWITCH)+$i] .and. 65535
if (0=$KEYSWITCH_ACTION_REDIRECT)
if ($evcode # $KEYSWITCH_UNDEFINED)
%_params[0] := $HIDE_PART_NOTHING
if ($evcode<128)
%_params[1] := $HIDE_PART_NOTHING
else
if ($evcode<256)
%_params[3] := $HIDE_PART_NOTHING
else
%_params[2] := $HIDE_PART_NOTHING
end if
end if
end if
end if
if ($i=0)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_to),$CONTROL_PAR_HIDE,%_params[0])
else
if ($evcode # $KEYSWITCH_UNDEFINED and (0=$KEYSWITCH_ACTION_REDIRECT))
set_control_par_str(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_TEXT,"-")
set_control_par(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
else
set_control_par_str(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_TEXT,"+")
if (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+(0*$MAX_REDIRECTS_PER_KEYSWITCH)+($i-1)] .and. 65535 # $KEYSWITCH_UNDEFINED and (0=$KEYSWITCH_ACTION_REDIRECT))
set_control_par(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
else
set_control_par(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
end if
end if
end if
set_control_par(%menu_rule_keyswitch_redirect_type[$i],$CONTROL_PAR_HIDE,%_params[0])
set_control_par(%value_rule_keyswitch_redirect_key[$i],$CONTROL_PAR_HIDE,%_params[1])
set_control_par(%label_rule_keyswitch_redirect_key_velocity[$i],$CONTROL_PAR_HIDE,%_params[1])
set_control_par(%value_rule_keyswitch_redirect_key_velocity[$i],$CONTROL_PAR_HIDE,%_params[1])
set_control_par(%value_rule_keyswitch_redirect_cc[$i],$CONTROL_PAR_HIDE,%_params[2])
set_control_par(%label_rule_keyswitch_redirect_cc_slash[$i],$CONTROL_PAR_HIDE,%_params[2])
set_control_par(%value_rule_keyswitch_redirect_cc_value[$i],$CONTROL_PAR_HIDE,%_params[2])
set_control_par(%value_rule_keyswitch_redirect_program[$i],$CONTROL_PAR_HIDE,%_params[3])
set_control_par(%button_rule_keyswitch_redirect_midi_learn[$i],$CONTROL_PAR_HIDE,%_params[0])
inc($i)
end while
end if
declare $_noteidx := 0
declare $_idx2
declare $_offset
declare $_i2
declare $_i
declare $_channel
declare $_idx
end on
function gui_update_for_selected_keyswitch
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$count := 0
while (%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$count] # $KEYSWITCH_UNDEFINED)
inc($count)
end while
if ($count>0)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
$ks := %rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$idx]
$action := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_ACTION]
$flag := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_FLAGS]
if ($ks # $KEYSWITCH_UNDEFINED)
if ($ks<128)
$value_rule_keyswitch_velocity_range_min := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 255
$value_rule_keyswitch_velocity_range_max := sh_right(%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE],8) .and. 255
else
if ($ks>(128*128))
$value_rule_keyswitch_cc_value_range_min := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 255
$value_rule_keyswitch_cc_value_range_max := sh_right(%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE],8) .and. 255
end if
end if
$menu_rule_keyswitch_source_channel := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_SOURCE_CHANNEL]
$menu_rule_keyswitch_target_channel := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_TARGET_CHANNEL]
$value_rule_keyswitch_transpose := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_TRANSPOSE]
$value_rule_timing := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING]
$value_rule_timing_first_note := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING_FIRST_NOTE]
$switch_rule_keyswitch_flags_hold_notes := $flag .and. $KEYSWITCH_FLAG_HOLD_NOTES
$switch_rule_keyswitch_flags_redirect_only := $flag .and. $KEYSWITCH_FLAG_IGNORE_ROUTING
end if
$j := 0
while ($j<=8)
%_params[$j] := $HIDE_WHOLE_CONTROL
inc($j)
end while
if ($ks # $KEYSWITCH_UNDEFINED)
%_params[0] := $HIDE_PART_NOTHING
%_params[4] := $HIDE_PART_BG
if ($ks<128)
%_params[1] := $HIDE_PART_NOTHING
else
if ($ks<256)
%_params[3] := $HIDE_PART_NOTHING
else
%_params[2] := $HIDE_PART_NOTHING
end if
end if
end if
set_control_par(get_ui_id($label_rule_keyswitch),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($menu_rule_keyswitch_type),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($label_rule_keyswitch_action),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($menu_rule_keyswitch_action),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($value_rule_keyswitch_key),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($label_rule_keyswitch_velocity_range_from),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($value_rule_keyswitch_velocity_range_min),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($label_rule_keyswitch_velocity_range_to),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($value_rule_keyswitch_velocity_range_max),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($value_rule_keyswitch_cc),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($label_rule_keyswitch_cc_value_range_from),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($value_rule_keyswitch_cc_value_range_min),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($label_rule_keyswitch_cc_value_range_to),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($value_rule_keyswitch_cc_value_range_max),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($value_rule_keyswitch_program),$CONTROL_PAR_HIDE,%_params[3])
set_control_par(get_ui_id($label_rule_keyswitch_source_channel),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($menu_rule_keyswitch_source_channel),$CONTROL_PAR_HIDE,%_params[4])
set_control_par(get_ui_id($label_rule_keyswitch_target_channel),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($menu_rule_keyswitch_target_channel),$CONTROL_PAR_HIDE,%_params[4])
set_control_par(get_ui_id($label_rule_keyswitch_flags),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($label_rule_timing),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($value_rule_timing),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($label_rule_timing_first_note),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($value_rule_timing_first_note),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($switch_rule_keyswitch_flags_hold_notes),$CONTROL_PAR_HIDE,%_params[4])
set_control_par(get_ui_id($switch_rule_keyswitch_flags_redirect_only),$CONTROL_PAR_HIDE,%_params[4])
set_control_par(get_ui_id($label_rule_keyswitch_transpose),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($value_rule_keyswitch_transpose),$CONTROL_PAR_HIDE,%_params[0])
$i := 0
while ($i<4)
$j := 0
while ($j<=8)
%_params[$j] := $HIDE_WHOLE_CONTROL
inc($j)
end while
$evcode := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+$i] .and. 65535
if ($action=$KEYSWITCH_ACTION_REDIRECT)
if ($evcode # $KEYSWITCH_UNDEFINED)
%_params[0] := $HIDE_PART_NOTHING
if ($evcode<128)
%_params[1] := $HIDE_PART_NOTHING
else
if ($evcode<256)
%_params[3] := $HIDE_PART_NOTHING
else
%_params[2] := $HIDE_PART_NOTHING
end if
end if
end if
end if
if ($i=0)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_to),$CONTROL_PAR_HIDE,%_params[0])
else
if ($evcode # $KEYSWITCH_UNDEFINED and ($action=$KEYSWITCH_ACTION_REDIRECT))
set_control_par_str(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_TEXT,"-")
set_control_par(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
else
set_control_par_str(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_TEXT,"+")
if (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+($i-1)] .and. 65535 # $KEYSWITCH_UNDEFINED and ($action=$KEYSWITCH_ACTION_REDIRECT))
set_control_par(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
else
set_control_par(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
end if
end if
end if
set_control_par(%menu_rule_keyswitch_redirect_type[$i],$CONTROL_PAR_HIDE,%_params[0])
set_control_par(%value_rule_keyswitch_redirect_key[$i],$CONTROL_PAR_HIDE,%_params[1])
set_control_par(%label_rule_keyswitch_redirect_key_velocity[$i],$CONTROL_PAR_HIDE,%_params[1])
set_control_par(%value_rule_keyswitch_redirect_key_velocity[$i],$CONTROL_PAR_HIDE,%_params[1])
set_control_par(%value_rule_keyswitch_redirect_cc[$i],$CONTROL_PAR_HIDE,%_params[2])
set_control_par(%label_rule_keyswitch_redirect_cc_slash[$i],$CONTROL_PAR_HIDE,%_params[2])
set_control_par(%value_rule_keyswitch_redirect_cc_value[$i],$CONTROL_PAR_HIDE,%_params[2])
set_control_par(%value_rule_keyswitch_redirect_program[$i],$CONTROL_PAR_HIDE,%_params[3])
set_control_par(%button_rule_keyswitch_redirect_midi_learn[$i],$CONTROL_PAR_HIDE,%_params[0])
inc($i)
end while
if ($ks<128)
$menu_rule_keyswitch_type := 0
$value_rule_keyswitch_key := $ks
else
if ($ks<256)
$menu_rule_keyswitch_type := 2
$value_rule_keyswitch_program := $ks-127
else
if ($ks # $KEYSWITCH_UNDEFINED)
$menu_rule_keyswitch_type := 1
$value_rule_keyswitch_cc := $ks/128-128
end if
end if
end if
$menu_rule_keyswitch_action := $action
if ($action=$KEYSWITCH_ACTION_REDIRECT)
$evcode := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. 65535
if ($evcode<128)
$velocity := sh_right(%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0],16) .and. 255
$value_rule_keyswitch_redirect_key0 := $evcode
$menu_rule_keyswitch_redirect_type0 := 0
$value_rule_keyswitch_redirect_key_velocity0 := $velocity
else
if ($evcode<256)
$menu_rule_keyswitch_redirect_type0 := 2
$value_rule_keyswitch_redirect_program0 := $evcode-128
else
if ($evcode # $KEYSWITCH_UNDEFINED)
$menu_rule_keyswitch_redirect_type0 := 1
$value_rule_keyswitch_redirect_cc0 := $evcode/128-128
$value_rule_keyswitch_redirect_cc_value0 := $evcode mod 128
end if
end if
end if
$evcode := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+1] .and. 65535
if ($evcode<128)
$velocity := sh_right(%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+1],16) .and. 255
$value_rule_keyswitch_redirect_key1 := $evcode
$menu_rule_keyswitch_redirect_type1 := 0
$value_rule_keyswitch_redirect_key_velocity1 := $velocity
else
if ($evcode<256)
$menu_rule_keyswitch_redirect_type1 := 2
$value_rule_keyswitch_redirect_program1 := $evcode-128
else
if ($evcode # $KEYSWITCH_UNDEFINED)
$menu_rule_keyswitch_redirect_type1 := 1
$value_rule_keyswitch_redirect_cc1 := $evcode/128-128
$value_rule_keyswitch_redirect_cc_value1 := $evcode mod 128
end if
end if
end if
$evcode := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+2] .and. 65535
if ($evcode<128)
$velocity := sh_right(%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+2],16) .and. 255
$value_rule_keyswitch_redirect_key2 := $evcode
$menu_rule_keyswitch_redirect_type2 := 0
$value_rule_keyswitch_redirect_key_velocity2 := $velocity
else
if ($evcode<256)
$menu_rule_keyswitch_redirect_type2 := 2
$value_rule_keyswitch_redirect_program2 := $evcode-128
else
if ($evcode # $KEYSWITCH_UNDEFINED)
$menu_rule_keyswitch_redirect_type2 := 1
$value_rule_keyswitch_redirect_cc2 := $evcode/128-128
$value_rule_keyswitch_redirect_cc_value2 := $evcode mod 128
end if
end if
end if
$evcode := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+3] .and. 65535
if ($evcode<128)
$velocity := sh_right(%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+3],16) .and. 255
$value_rule_keyswitch_redirect_key3 := $evcode
$menu_rule_keyswitch_redirect_type3 := 0
$value_rule_keyswitch_redirect_key_velocity3 := $velocity
else
if ($evcode<256)
$menu_rule_keyswitch_redirect_type3 := 2
$value_rule_keyswitch_redirect_program3 := $evcode-128
else
if ($evcode # $KEYSWITCH_UNDEFINED)
$menu_rule_keyswitch_redirect_type3 := 1
$value_rule_keyswitch_redirect_cc3 := $evcode/128-128
$value_rule_keyswitch_redirect_cc_value3 := $evcode mod 128
end if
end if
end if
end if
else
$j := 0
while ($j<=8)
%_params[$j] := $HIDE_WHOLE_CONTROL
inc($j)
end while
if ($KEYSWITCH_UNDEFINED # $KEYSWITCH_UNDEFINED)
%_params[0] := $HIDE_PART_NOTHING
%_params[4] := $HIDE_PART_BG
if ($KEYSWITCH_UNDEFINED<128)
%_params[1] := $HIDE_PART_NOTHING
else
if ($KEYSWITCH_UNDEFINED<256)
%_params[3] := $HIDE_PART_NOTHING
else
%_params[2] := $HIDE_PART_NOTHING
end if
end if
end if
set_control_par(get_ui_id($label_rule_keyswitch),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($menu_rule_keyswitch_type),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($label_rule_keyswitch_action),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($menu_rule_keyswitch_action),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($value_rule_keyswitch_key),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($label_rule_keyswitch_velocity_range_from),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($value_rule_keyswitch_velocity_range_min),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($label_rule_keyswitch_velocity_range_to),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($value_rule_keyswitch_velocity_range_max),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($value_rule_keyswitch_cc),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($label_rule_keyswitch_cc_value_range_from),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($value_rule_keyswitch_cc_value_range_min),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($label_rule_keyswitch_cc_value_range_to),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($value_rule_keyswitch_cc_value_range_max),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($value_rule_keyswitch_program),$CONTROL_PAR_HIDE,%_params[3])
set_control_par(get_ui_id($label_rule_keyswitch_source_channel),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($menu_rule_keyswitch_source_channel),$CONTROL_PAR_HIDE,%_params[4])
set_control_par(get_ui_id($label_rule_keyswitch_target_channel),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($menu_rule_keyswitch_target_channel),$CONTROL_PAR_HIDE,%_params[4])
set_control_par(get_ui_id($label_rule_keyswitch_flags),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($label_rule_timing),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($value_rule_timing),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($label_rule_timing_first_note),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($value_rule_timing_first_note),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($switch_rule_keyswitch_flags_hold_notes),$CONTROL_PAR_HIDE,%_params[4])
set_control_par(get_ui_id($switch_rule_keyswitch_flags_redirect_only),$CONTROL_PAR_HIDE,%_params[4])
set_control_par(get_ui_id($label_rule_keyswitch_transpose),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($value_rule_keyswitch_transpose),$CONTROL_PAR_HIDE,%_params[0])
$i := 0
while ($i<4)
$j := 0
while ($j<=8)
%_params[$j] := $HIDE_WHOLE_CONTROL
inc($j)
end while
$evcode := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+(0*$MAX_REDIRECTS_PER_KEYSWITCH)+$i] .and. 65535
if (0=$KEYSWITCH_ACTION_REDIRECT)
if ($evcode # $KEYSWITCH_UNDEFINED)
%_params[0] := $HIDE_PART_NOTHING
if ($evcode<128)
%_params[1] := $HIDE_PART_NOTHING
else
if ($evcode<256)
%_params[3] := $HIDE_PART_NOTHING
else
%_params[2] := $HIDE_PART_NOTHING
end if
end if
end if
end if
if ($i=0)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_to),$CONTROL_PAR_HIDE,%_params[0])
else
if ($evcode # $KEYSWITCH_UNDEFINED and (0=$KEYSWITCH_ACTION_REDIRECT))
set_control_par_str(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_TEXT,"-")
set_control_par(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
else
set_control_par_str(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_TEXT,"+")
if (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+(0*$MAX_REDIRECTS_PER_KEYSWITCH)+($i-1)] .and. 65535 # $KEYSWITCH_UNDEFINED and (0=$KEYSWITCH_ACTION_REDIRECT))
set_control_par(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
else
set_control_par(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
end if
end if
end if
set_control_par(%menu_rule_keyswitch_redirect_type[$i],$CONTROL_PAR_HIDE,%_params[0])
set_control_par(%value_rule_keyswitch_redirect_key[$i],$CONTROL_PAR_HIDE,%_params[1])
set_control_par(%label_rule_keyswitch_redirect_key_velocity[$i],$CONTROL_PAR_HIDE,%_params[1])
set_control_par(%value_rule_keyswitch_redirect_key_velocity[$i],$CONTROL_PAR_HIDE,%_params[1])
set_control_par(%value_rule_keyswitch_redirect_cc[$i],$CONTROL_PAR_HIDE,%_params[2])
set_control_par(%label_rule_keyswitch_redirect_cc_slash[$i],$CONTROL_PAR_HIDE,%_params[2])
set_control_par(%value_rule_keyswitch_redirect_cc_value[$i],$CONTROL_PAR_HIDE,%_params[2])
set_control_par(%value_rule_keyswitch_redirect_program[$i],$CONTROL_PAR_HIDE,%_params[3])
set_control_par(%button_rule_keyswitch_redirect_midi_learn[$i],$CONTROL_PAR_HIDE,%_params[0])
inc($i)
end while
end if
end function
function gui_update_for_selected_rule
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
@text_rule_name := !rules___name[$rule]
$menu_global_cc_hanging := %global_config[$GLOBAL_CONFIG_CC_HANGING]
$menu_rule_keyswitch_channel := %rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_KEYSWITCH_CHANNEL]
$menu_rule_source_channel := %rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_SOURCE_CHANNEL]
$menu_rule_target_channel := %rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_TARGET_CHANNEL]
$menu_rule_cc_chasing := %rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_CC_CHASING]
if ($menu_rule_cc_chasing=2)
set_text($label_rule_cc_chasing_info,"Chases CCs 1, 2, 11, 64-69")
else
set_text($label_rule_cc_chasing_info,"")
end if
$button_rule_bypass := 1-%rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_ENABLED]
$menu_keyswitches := 0
$i := 0
while ($i<$MAX_KEYSWITCHES_PER_RULE)
$ks := %rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$i]
if ($ks # $KEYSWITCH_UNDEFINED)
if ($ks<0 or ($ks=$KEYSWITCH_UNDEFINED))
@name := "Undefined"
else
if ($ks<128)
@name := !note_names[$ks]
if (%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] # $VELOCITY_RANGE_DEFAULT)
@name := @name & "   vel " & (%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 255) & "-" & (sh_right(%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE],8) .and. 255)
end if
else
if ($ks<256)
@name := "Prog " & ($ks mod 127)
else
@name := "CC" & ($ks/128-128) & " / " & (%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 255)
if (%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 255 # (sh_right(%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE],8) .and. 255))
@name := @name & "-" & (sh_right(%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE],8) .and. 255)
end if
end if
end if
end if
set_menu_item_str(get_ui_id($menu_keyswitches),$i,@name)
set_menu_item_visibility(get_ui_id($menu_keyswitches),$i,1)
else
set_menu_item_str(get_ui_id($menu_keyswitches),$i,"<empty>")
if ($i>0)
set_menu_item_visibility(get_ui_id($menu_keyswitches),$i,0)
end if
end if
inc($i)
end while
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$count := 0
while (%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$count] # $KEYSWITCH_UNDEFINED)
inc($count)
end while
if ($count>0)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
$ks := %rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$idx]
$action := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_ACTION]
$flag := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_FLAGS]
if ($ks # $KEYSWITCH_UNDEFINED)
if ($ks<128)
$value_rule_keyswitch_velocity_range_min := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 255
$value_rule_keyswitch_velocity_range_max := sh_right(%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE],8) .and. 255
else
if ($ks>(128*128))
$value_rule_keyswitch_cc_value_range_min := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 255
$value_rule_keyswitch_cc_value_range_max := sh_right(%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE],8) .and. 255
end if
end if
$menu_rule_keyswitch_source_channel := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_SOURCE_CHANNEL]
$menu_rule_keyswitch_target_channel := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_TARGET_CHANNEL]
$value_rule_keyswitch_transpose := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_TRANSPOSE]
$value_rule_timing := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING]
$value_rule_timing_first_note := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING_FIRST_NOTE]
$switch_rule_keyswitch_flags_hold_notes := $flag .and. $KEYSWITCH_FLAG_HOLD_NOTES
$switch_rule_keyswitch_flags_redirect_only := $flag .and. $KEYSWITCH_FLAG_IGNORE_ROUTING
end if
$j := 0
while ($j<=8)
%_params[$j] := $HIDE_WHOLE_CONTROL
inc($j)
end while
if ($ks # $KEYSWITCH_UNDEFINED)
%_params[0] := $HIDE_PART_NOTHING
%_params[4] := $HIDE_PART_BG
if ($ks<128)
%_params[1] := $HIDE_PART_NOTHING
else
if ($ks<256)
%_params[3] := $HIDE_PART_NOTHING
else
%_params[2] := $HIDE_PART_NOTHING
end if
end if
end if
set_control_par(get_ui_id($label_rule_keyswitch),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($menu_rule_keyswitch_type),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($label_rule_keyswitch_action),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($menu_rule_keyswitch_action),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($value_rule_keyswitch_key),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($label_rule_keyswitch_velocity_range_from),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($value_rule_keyswitch_velocity_range_min),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($label_rule_keyswitch_velocity_range_to),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($value_rule_keyswitch_velocity_range_max),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($value_rule_keyswitch_cc),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($label_rule_keyswitch_cc_value_range_from),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($value_rule_keyswitch_cc_value_range_min),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($label_rule_keyswitch_cc_value_range_to),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($value_rule_keyswitch_cc_value_range_max),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($value_rule_keyswitch_program),$CONTROL_PAR_HIDE,%_params[3])
set_control_par(get_ui_id($label_rule_keyswitch_source_channel),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($menu_rule_keyswitch_source_channel),$CONTROL_PAR_HIDE,%_params[4])
set_control_par(get_ui_id($label_rule_keyswitch_target_channel),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($menu_rule_keyswitch_target_channel),$CONTROL_PAR_HIDE,%_params[4])
set_control_par(get_ui_id($label_rule_keyswitch_flags),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($label_rule_timing),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($value_rule_timing),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($label_rule_timing_first_note),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($value_rule_timing_first_note),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($switch_rule_keyswitch_flags_hold_notes),$CONTROL_PAR_HIDE,%_params[4])
set_control_par(get_ui_id($switch_rule_keyswitch_flags_redirect_only),$CONTROL_PAR_HIDE,%_params[4])
set_control_par(get_ui_id($label_rule_keyswitch_transpose),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($value_rule_keyswitch_transpose),$CONTROL_PAR_HIDE,%_params[0])
$i := 0
while ($i<4)
$j := 0
while ($j<=8)
%_params[$j] := $HIDE_WHOLE_CONTROL
inc($j)
end while
$evcode := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+$i] .and. 65535
if ($action=$KEYSWITCH_ACTION_REDIRECT)
if ($evcode # $KEYSWITCH_UNDEFINED)
%_params[0] := $HIDE_PART_NOTHING
if ($evcode<128)
%_params[1] := $HIDE_PART_NOTHING
else
if ($evcode<256)
%_params[3] := $HIDE_PART_NOTHING
else
%_params[2] := $HIDE_PART_NOTHING
end if
end if
end if
end if
if ($i=0)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_to),$CONTROL_PAR_HIDE,%_params[0])
else
if ($evcode # $KEYSWITCH_UNDEFINED and ($action=$KEYSWITCH_ACTION_REDIRECT))
set_control_par_str(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_TEXT,"-")
set_control_par(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
else
set_control_par_str(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_TEXT,"+")
if (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+($i-1)] .and. 65535 # $KEYSWITCH_UNDEFINED and ($action=$KEYSWITCH_ACTION_REDIRECT))
set_control_par(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
else
set_control_par(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
end if
end if
end if
set_control_par(%menu_rule_keyswitch_redirect_type[$i],$CONTROL_PAR_HIDE,%_params[0])
set_control_par(%value_rule_keyswitch_redirect_key[$i],$CONTROL_PAR_HIDE,%_params[1])
set_control_par(%label_rule_keyswitch_redirect_key_velocity[$i],$CONTROL_PAR_HIDE,%_params[1])
set_control_par(%value_rule_keyswitch_redirect_key_velocity[$i],$CONTROL_PAR_HIDE,%_params[1])
set_control_par(%value_rule_keyswitch_redirect_cc[$i],$CONTROL_PAR_HIDE,%_params[2])
set_control_par(%label_rule_keyswitch_redirect_cc_slash[$i],$CONTROL_PAR_HIDE,%_params[2])
set_control_par(%value_rule_keyswitch_redirect_cc_value[$i],$CONTROL_PAR_HIDE,%_params[2])
set_control_par(%value_rule_keyswitch_redirect_program[$i],$CONTROL_PAR_HIDE,%_params[3])
set_control_par(%button_rule_keyswitch_redirect_midi_learn[$i],$CONTROL_PAR_HIDE,%_params[0])
inc($i)
end while
if ($ks<128)
$menu_rule_keyswitch_type := 0
$value_rule_keyswitch_key := $ks
else
if ($ks<256)
$menu_rule_keyswitch_type := 2
$value_rule_keyswitch_program := $ks-127
else
if ($ks # $KEYSWITCH_UNDEFINED)
$menu_rule_keyswitch_type := 1
$value_rule_keyswitch_cc := $ks/128-128
end if
end if
end if
$menu_rule_keyswitch_action := $action
if ($action=$KEYSWITCH_ACTION_REDIRECT)
$evcode := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. 65535
if ($evcode<128)
$velocity := sh_right(%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0],16) .and. 255
$value_rule_keyswitch_redirect_key0 := $evcode
$menu_rule_keyswitch_redirect_type0 := 0
$value_rule_keyswitch_redirect_key_velocity0 := $velocity
else
if ($evcode<256)
$menu_rule_keyswitch_redirect_type0 := 2
$value_rule_keyswitch_redirect_program0 := $evcode-128
else
if ($evcode # $KEYSWITCH_UNDEFINED)
$menu_rule_keyswitch_redirect_type0 := 1
$value_rule_keyswitch_redirect_cc0 := $evcode/128-128
$value_rule_keyswitch_redirect_cc_value0 := $evcode mod 128
end if
end if
end if
$evcode := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+1] .and. 65535
if ($evcode<128)
$velocity := sh_right(%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+1],16) .and. 255
$value_rule_keyswitch_redirect_key1 := $evcode
$menu_rule_keyswitch_redirect_type1 := 0
$value_rule_keyswitch_redirect_key_velocity1 := $velocity
else
if ($evcode<256)
$menu_rule_keyswitch_redirect_type1 := 2
$value_rule_keyswitch_redirect_program1 := $evcode-128
else
if ($evcode # $KEYSWITCH_UNDEFINED)
$menu_rule_keyswitch_redirect_type1 := 1
$value_rule_keyswitch_redirect_cc1 := $evcode/128-128
$value_rule_keyswitch_redirect_cc_value1 := $evcode mod 128
end if
end if
end if
$evcode := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+2] .and. 65535
if ($evcode<128)
$velocity := sh_right(%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+2],16) .and. 255
$value_rule_keyswitch_redirect_key2 := $evcode
$menu_rule_keyswitch_redirect_type2 := 0
$value_rule_keyswitch_redirect_key_velocity2 := $velocity
else
if ($evcode<256)
$menu_rule_keyswitch_redirect_type2 := 2
$value_rule_keyswitch_redirect_program2 := $evcode-128
else
if ($evcode # $KEYSWITCH_UNDEFINED)
$menu_rule_keyswitch_redirect_type2 := 1
$value_rule_keyswitch_redirect_cc2 := $evcode/128-128
$value_rule_keyswitch_redirect_cc_value2 := $evcode mod 128
end if
end if
end if
$evcode := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+3] .and. 65535
if ($evcode<128)
$velocity := sh_right(%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+3],16) .and. 255
$value_rule_keyswitch_redirect_key3 := $evcode
$menu_rule_keyswitch_redirect_type3 := 0
$value_rule_keyswitch_redirect_key_velocity3 := $velocity
else
if ($evcode<256)
$menu_rule_keyswitch_redirect_type3 := 2
$value_rule_keyswitch_redirect_program3 := $evcode-128
else
if ($evcode # $KEYSWITCH_UNDEFINED)
$menu_rule_keyswitch_redirect_type3 := 1
$value_rule_keyswitch_redirect_cc3 := $evcode/128-128
$value_rule_keyswitch_redirect_cc_value3 := $evcode mod 128
end if
end if
end if
end if
else
$j := 0
while ($j<=8)
%_params[$j] := $HIDE_WHOLE_CONTROL
inc($j)
end while
if ($KEYSWITCH_UNDEFINED # $KEYSWITCH_UNDEFINED)
%_params[0] := $HIDE_PART_NOTHING
%_params[4] := $HIDE_PART_BG
if ($KEYSWITCH_UNDEFINED<128)
%_params[1] := $HIDE_PART_NOTHING
else
if ($KEYSWITCH_UNDEFINED<256)
%_params[3] := $HIDE_PART_NOTHING
else
%_params[2] := $HIDE_PART_NOTHING
end if
end if
end if
set_control_par(get_ui_id($label_rule_keyswitch),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($menu_rule_keyswitch_type),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($label_rule_keyswitch_action),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($menu_rule_keyswitch_action),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($value_rule_keyswitch_key),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($label_rule_keyswitch_velocity_range_from),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($value_rule_keyswitch_velocity_range_min),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($label_rule_keyswitch_velocity_range_to),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($value_rule_keyswitch_velocity_range_max),$CONTROL_PAR_HIDE,%_params[1])
set_control_par(get_ui_id($value_rule_keyswitch_cc),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($label_rule_keyswitch_cc_value_range_from),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($value_rule_keyswitch_cc_value_range_min),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($label_rule_keyswitch_cc_value_range_to),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($value_rule_keyswitch_cc_value_range_max),$CONTROL_PAR_HIDE,%_params[2])
set_control_par(get_ui_id($value_rule_keyswitch_program),$CONTROL_PAR_HIDE,%_params[3])
set_control_par(get_ui_id($label_rule_keyswitch_source_channel),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($menu_rule_keyswitch_source_channel),$CONTROL_PAR_HIDE,%_params[4])
set_control_par(get_ui_id($label_rule_keyswitch_target_channel),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($menu_rule_keyswitch_target_channel),$CONTROL_PAR_HIDE,%_params[4])
set_control_par(get_ui_id($label_rule_keyswitch_flags),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($label_rule_timing),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($value_rule_timing),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($label_rule_timing_first_note),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($value_rule_timing_first_note),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($switch_rule_keyswitch_flags_hold_notes),$CONTROL_PAR_HIDE,%_params[4])
set_control_par(get_ui_id($switch_rule_keyswitch_flags_redirect_only),$CONTROL_PAR_HIDE,%_params[4])
set_control_par(get_ui_id($label_rule_keyswitch_transpose),$CONTROL_PAR_HIDE,%_params[0])
set_control_par(get_ui_id($value_rule_keyswitch_transpose),$CONTROL_PAR_HIDE,%_params[0])
$i := 0
while ($i<4)
$j := 0
while ($j<=8)
%_params[$j] := $HIDE_WHOLE_CONTROL
inc($j)
end while
$evcode := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+(0*$MAX_REDIRECTS_PER_KEYSWITCH)+$i] .and. 65535
if (0=$KEYSWITCH_ACTION_REDIRECT)
if ($evcode # $KEYSWITCH_UNDEFINED)
%_params[0] := $HIDE_PART_NOTHING
if ($evcode<128)
%_params[1] := $HIDE_PART_NOTHING
else
if ($evcode<256)
%_params[3] := $HIDE_PART_NOTHING
else
%_params[2] := $HIDE_PART_NOTHING
end if
end if
end if
end if
if ($i=0)
set_control_par(get_ui_id($label_rule_keyswitch_redirect_to),$CONTROL_PAR_HIDE,%_params[0])
else
if ($evcode # $KEYSWITCH_UNDEFINED and (0=$KEYSWITCH_ACTION_REDIRECT))
set_control_par_str(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_TEXT,"-")
set_control_par(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
else
set_control_par_str(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_TEXT,"+")
if (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+(0*$MAX_REDIRECTS_PER_KEYSWITCH)+($i-1)] .and. 65535 # $KEYSWITCH_UNDEFINED and (0=$KEYSWITCH_ACTION_REDIRECT))
set_control_par(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
else
set_control_par(%button_rule_keyswitch_addremove[$i],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
end if
end if
end if
set_control_par(%menu_rule_keyswitch_redirect_type[$i],$CONTROL_PAR_HIDE,%_params[0])
set_control_par(%value_rule_keyswitch_redirect_key[$i],$CONTROL_PAR_HIDE,%_params[1])
set_control_par(%label_rule_keyswitch_redirect_key_velocity[$i],$CONTROL_PAR_HIDE,%_params[1])
set_control_par(%value_rule_keyswitch_redirect_key_velocity[$i],$CONTROL_PAR_HIDE,%_params[1])
set_control_par(%value_rule_keyswitch_redirect_cc[$i],$CONTROL_PAR_HIDE,%_params[2])
set_control_par(%label_rule_keyswitch_redirect_cc_slash[$i],$CONTROL_PAR_HIDE,%_params[2])
set_control_par(%value_rule_keyswitch_redirect_cc_value[$i],$CONTROL_PAR_HIDE,%_params[2])
set_control_par(%value_rule_keyswitch_redirect_program[$i],$CONTROL_PAR_HIDE,%_params[3])
set_control_par(%button_rule_keyswitch_redirect_midi_learn[$i],$CONTROL_PAR_HIDE,%_params[0])
inc($i)
end while
end if
end function
function gui_clear_active_routes_for_all_channels
$j := 0
while ($j<$NUM_SOURCE_CHANNELS)
%active_routes_bitmap[$j*2+0] := 0
%active_routes_bitmap[$j*2+1] := 0
%blackholed_sources[$j] := 0
inc($j)
end while
end function
function gui_clear_keyswitches_for_selected_rule
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$menu_keyswitches := 0
$i := 0
while ($i<$MAX_KEYSWITCHES_PER_RULE)
%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$i] := $KEYSWITCH_UNDEFINED
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_ACTION] := $KEYSWITCH_ACTION_BLOCK
set_menu_item_str(get_ui_id($menu_keyswitches),$i,"<empty>")
if ($i>0)
set_menu_item_visibility(get_ui_id($menu_keyswitches),$i,0)
end if
inc($i)
end while
call gui_clear_active_routes_for_all_channels
call gui_update_for_selected_keyswitch
end function
function gui_update_keyswitch_name
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
$ks := %rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$idx]
if ($ks<0 or ($ks=$KEYSWITCH_UNDEFINED))
@name := "Undefined"
else
if ($ks<128)
@name := !note_names[$ks]
if (%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] # $VELOCITY_RANGE_DEFAULT)
@name := @name & "   vel " & (%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 255) & "-" & (sh_right(%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE],8) .and. 255)
end if
else
if ($ks<256)
@name := "Prog " & ($ks mod 127)
else
@name := "CC" & ($ks/128-128) & " / " & (%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 255)
if (%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 255 # (sh_right(%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE],8) .and. 255))
@name := @name & "-" & (sh_right(%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE],8) .and. 255)
end if
end if
end if
end if
set_menu_item_str(get_ui_id($menu_keyswitches),$idx,@name)
end function
function gui_update_keyswitch_name_defer
$keyswitch_name_update_parallelism := $keyswitch_name_update_parallelism+1
wait(500000)
$keyswitch_name_update_parallelism := $keyswitch_name_update_parallelism-1
if ($keyswitch_name_update_parallelism=0)
call gui_update_keyswitch_name
end if
end function
function gui_set_selected_keyswitch_from_ui
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
$ks := %rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$idx]
$flag := 0
if ($menu_rule_keyswitch_type=0)
if ($ks # $value_rule_keyswitch_key or (%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 255 # $value_rule_keyswitch_velocity_range_min) or (sh_right(%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE],8) .and. 255 # $value_rule_keyswitch_velocity_range_max))
$flag := 1
%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$idx] := $value_rule_keyswitch_key
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] := (%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 65280)+$value_rule_keyswitch_velocity_range_min
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] := (%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 255)+sh_left($value_rule_keyswitch_velocity_range_max,8)
end if
else
if ($menu_rule_keyswitch_type=2)
$evcode := 127+$value_rule_keyswitch_program
if ($ks # $evcode)
$flag := 1
%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$idx] := $evcode
end if
else
$evcode := 128*128+($value_rule_keyswitch_cc*128)
if ($value_rule_keyswitch_cc_value_range_min=$value_rule_keyswitch_cc_value_range_max)
$evcode := $evcode+$value_rule_keyswitch_cc_value_range_min
end if
if ($ks # $evcode or (%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 255 # $value_rule_keyswitch_cc_value_range_min) or (sh_right(%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE],8) .and. 255 # $value_rule_keyswitch_cc_value_range_max))
$flag := 1
%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$idx] := $evcode
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] := (%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 65280)+$value_rule_keyswitch_cc_value_range_min
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] := (%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 255)+sh_left($value_rule_keyswitch_cc_value_range_max,8)
end if
end if
end if
if ($flag=1)
call gui_update_for_selected_keyswitch
call gui_update_keyswitch_name_defer
end if
end function
function build_ks_maps
$i := 0
while ($i<num_elements(%ks_to_keyswitch_channels))
%ks_to_keyswitch_channels[$i] := 0
%ks_to_rules[$i] := 0
inc($i)
end while
$i := 0
while ($i<$MAX_RULES)
if (%rules___config[$i*$MAX_CONFIG_PER_RULE+$RULE_DEFINED]=1 and (%rules___config[$i*$MAX_CONFIG_PER_RULE+$RULE_ENABLED]=1))
$j := 0
while ($j<$MAX_KEYSWITCHES_PER_RULE)
$evcode := %rules___keyswitches[$i*$MAX_KEYSWITCHES_PER_RULE+$j]
if ($evcode # $KEYSWITCH_UNDEFINED)
if ($evcode<(128*128) or ($evcode mod 128 # 0))
$source := %rules___config[$i*$MAX_CONFIG_PER_RULE+$RULE_KEYSWITCH_CHANNEL]
if ($source=-1)
$source := 0
while ($source<$NUM_SOURCE_CHANNELS)
%ks_to_keyswitch_channels[$evcode] := %ks_to_keyswitch_channels[$evcode] .or. sh_left(1,$source)
inc($source)
end while
else
%ks_to_keyswitch_channels[$evcode] := %ks_to_keyswitch_channels[$evcode] .or. sh_left(1,$source-1)
end if
%ks_to_rules[$evcode] := %ks_to_rules[$evcode] .or. sh_left(1,$i)
else
$value := %rules___keyswitch_config[$i*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($j*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 255
while ($value<=(sh_right(%rules___keyswitch_config[$i*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($j*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE],8) .and. 255))
$source := %rules___config[$i*$MAX_CONFIG_PER_RULE+$RULE_KEYSWITCH_CHANNEL]
if ($source=-1)
$source := 0
while ($source<$NUM_SOURCE_CHANNELS)
%ks_to_keyswitch_channels[$evcode+$value] := %ks_to_keyswitch_channels[$evcode+$value] .or. sh_left(1,$source)
inc($source)
end while
else
%ks_to_keyswitch_channels[$evcode+$value] := %ks_to_keyswitch_channels[$evcode+$value] .or. sh_left(1,$source-1)
end if
%ks_to_rules[$evcode+$value] := %ks_to_rules[$evcode+$value] .or. sh_left(1,$i)
inc($value)
end while
end if
end if
inc($j)
end while
end if
inc($i)
end while
end function
function gui_append_keyswitch_to_selected_rule
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
if ($ks # $KEYSWITCH_UNDEFINED)
$idx := -1
$j := 0
while ($j<$MAX_KEYSWITCHES_PER_RULE and ($idx=-1))
if (%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$j]=$ks or ($ks>=(128*128) and (%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$j]=($ks/128*128))))
if ($ks>128 and ($ks<(128*128)) or (-1>=(%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($j*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 255) and (-1<=(sh_right(%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($j*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE],8) .and. 255))) or (-1=-1))
$idx := $j
end if
end if
inc($j)
end while
else
$idx := -1
end if
if ($idx=-1)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
$count := 0
while (%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$count] # $KEYSWITCH_UNDEFINED)
inc($count)
end while
$velocity := $VELOCITY_RANGE_DEFAULT
if ($ks=$KEYSWITCH_UNDEFINED)
if ($count>0)
if ($button_keyswitch_clone=1)
$ks := %rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$idx]
else
$ks := %rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$idx]+1
end if
$velocity := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE]
else
$ks := 0
end if
else
if ($ks<128 and ($button_keyswitch_midi_learn_inc=1) and ($count>0))
$velocity := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE]
else
if ($ks>(128*128))
$value := $ks mod 128
$velocity := $value+sh_left($value,8)
end if
end if
end if
if ($count<$MAX_KEYSWITCHES_PER_RULE)
if ($ks<0 or ($ks=$KEYSWITCH_UNDEFINED))
@name := "Undefined"
else
if ($ks<128)
@name := !note_names[$ks]
if ($velocity # $VELOCITY_RANGE_DEFAULT)
@name := @name & "   vel " & ($velocity .and. 255) & "-" & (sh_right($velocity,8) .and. 255)
end if
else
if ($ks<256)
@name := "Prog " & ($ks mod 127)
else
@name := "CC" & ($ks/128-128) & " / " & ($velocity .and. 255)
if ($velocity .and. 255 # (sh_right($velocity,8) .and. 255))
@name := @name & "-" & (sh_right($velocity,8) .and. 255)
end if
end if
end if
end if
set_menu_item_str(get_ui_id($menu_keyswitches),$count,@name)
set_menu_item_visibility(get_ui_id($menu_keyswitches),$count,1)
%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$count] := $ks
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($count*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] := $velocity
$menu_keyswitches := $count
if ($count>0)
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($count*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_FLAGS] := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_FLAGS]
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($count*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_ACTION] := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_ACTION]
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($count*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_SOURCE_CHANNEL] := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_SOURCE_CHANNEL]
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($count*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_TARGET_CHANNEL] := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_TARGET_CHANNEL]
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($count*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_TRANSPOSE] := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_TRANSPOSE]
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($count*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING] := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING]
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($count*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING_FIRST_NOTE] := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING_FIRST_NOTE]
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($count*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_VELOCITYFORCC] := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_VELOCITYFORCC]
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($count*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_RANGE_IN] := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_RANGE_IN]
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($count*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_RANGE_OUT] := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_RANGE_OUT]
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($count*$MAX_CONFIG_PER_KEYSWITCH)+$KEYSWITCH_VELOCITYFORCC] := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$KEYSWITCH_VELOCITYFORCC]
$action := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_ACTION]
if ($action=$KEYSWITCH_ACTION_REDIRECT)
if ($button_keyswitch_midi_learn_inc=1)
$offset := $ks-%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$idx]
else
$offset := 0
end if
$i := 0
while ($i<$MAX_REDIRECTS_PER_KEYSWITCH)
$evcode := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+$i] .and. 65535
if ($evcode # $KEYSWITCH_UNDEFINED)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($count*$MAX_REDIRECTS_PER_KEYSWITCH)+$i] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($count*$MAX_REDIRECTS_PER_KEYSWITCH)+$i] .and. -65536)+$evcode+$offset
$value := sh_right(%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+$i],16) .and. 255
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($count*$MAX_REDIRECTS_PER_KEYSWITCH)+$i] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($count*$MAX_REDIRECTS_PER_KEYSWITCH)+$i] .and. -16711681)+sh_left($value,16)
else
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($count*$MAX_REDIRECTS_PER_KEYSWITCH)+$i] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($count*$MAX_REDIRECTS_PER_KEYSWITCH)+$i] .and. -65536)+$KEYSWITCH_UNDEFINED
end if
inc($i)
end while
end if
else
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($count*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_FLAGS] := 0
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($count*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_ACTION] := $KEYSWITCH_ACTION_BLOCK
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($count*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_SOURCE_CHANNEL] := 0
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($count*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_TARGET_CHANNEL] := 0
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($count*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_TRANSPOSE] := 0
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($count*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING] := 0
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($count*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING_FIRST_NOTE] := 0
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($count*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_RANGE_IN] := 0
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($count*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_RANGE_OUT] := 0
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($count*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_VELOCITYFORCC] := 0
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($count*$MAX_CONFIG_PER_KEYSWITCH)+$KEYSWITCH_VELOCITYFORCC] := 0
$i := 0
while ($i<$MAX_REDIRECTS_PER_KEYSWITCH)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($count*$MAX_REDIRECTS_PER_KEYSWITCH)+$i] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($count*$MAX_REDIRECTS_PER_KEYSWITCH)+$i] .and. -65536)+$KEYSWITCH_UNDEFINED
inc($i)
end while
end if
call gui_update_for_selected_keyswitch
message("Added keyswitch " & @name & " to rule " & !rules___name[$rule] & " at index " & $count)
else
message("ERROR: too many keyswitches for this rule, can't add.")
end if
$need_maps_rebuild := 1
else
$menu_keyswitches := $idx
call gui_update_for_selected_keyswitch
end if
end function
function gui_set_selected_keyswitch_redirect_from_ui
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
if (get_control_par(%menu_rule_keyswitch_redirect_type[0],$CONTROL_PAR_HIDE)=$HIDE_WHOLE_CONTROL)
$ks := $KEYSWITCH_UNDEFINED
else
if ($menu_rule_keyswitch_redirect_type0=0)
$ks := $value_rule_keyswitch_redirect_key0
else
if ($menu_rule_keyswitch_redirect_type0=1)
$ks := 128*128+($value_rule_keyswitch_redirect_cc0*128)+$value_rule_keyswitch_redirect_cc_value0
else
if ($menu_rule_keyswitch_redirect_type0=2)
$ks := 128+$value_rule_keyswitch_redirect_program0
else
$ks := $KEYSWITCH_UNDEFINED
end if
end if
end if
end if
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. -65536)+$ks
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. -16711681)+sh_left($value_rule_keyswitch_redirect_key_velocity0,16)
if (get_control_par(%menu_rule_keyswitch_redirect_type[1],$CONTROL_PAR_HIDE)=$HIDE_WHOLE_CONTROL)
$ks := $KEYSWITCH_UNDEFINED
else
if ($menu_rule_keyswitch_redirect_type1=0)
$ks := $value_rule_keyswitch_redirect_key1
else
if ($menu_rule_keyswitch_redirect_type1=1)
$ks := 128*128+($value_rule_keyswitch_redirect_cc1*128)+$value_rule_keyswitch_redirect_cc_value1
else
if ($menu_rule_keyswitch_redirect_type1=2)
$ks := 128+$value_rule_keyswitch_redirect_program1
else
$ks := $KEYSWITCH_UNDEFINED
end if
end if
end if
end if
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+1] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+1] .and. -65536)+$ks
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+1] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+1] .and. -16711681)+sh_left($value_rule_keyswitch_redirect_key_velocity1,16)
if (get_control_par(%menu_rule_keyswitch_redirect_type[2],$CONTROL_PAR_HIDE)=$HIDE_WHOLE_CONTROL)
$ks := $KEYSWITCH_UNDEFINED
else
if ($menu_rule_keyswitch_redirect_type2=0)
$ks := $value_rule_keyswitch_redirect_key2
else
if ($menu_rule_keyswitch_redirect_type2=1)
$ks := 128*128+($value_rule_keyswitch_redirect_cc2*128)+$value_rule_keyswitch_redirect_cc_value2
else
if ($menu_rule_keyswitch_redirect_type2=2)
$ks := 128+$value_rule_keyswitch_redirect_program2
else
$ks := $KEYSWITCH_UNDEFINED
end if
end if
end if
end if
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+2] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+2] .and. -65536)+$ks
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+2] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+2] .and. -16711681)+sh_left($value_rule_keyswitch_redirect_key_velocity2,16)
if (get_control_par(%menu_rule_keyswitch_redirect_type[3],$CONTROL_PAR_HIDE)=$HIDE_WHOLE_CONTROL)
$ks := $KEYSWITCH_UNDEFINED
else
if ($menu_rule_keyswitch_redirect_type3=0)
$ks := $value_rule_keyswitch_redirect_key3
else
if ($menu_rule_keyswitch_redirect_type3=1)
$ks := 128*128+($value_rule_keyswitch_redirect_cc3*128)+$value_rule_keyswitch_redirect_cc_value3
else
if ($menu_rule_keyswitch_redirect_type3=2)
$ks := 128+$value_rule_keyswitch_redirect_program3
else
$ks := $KEYSWITCH_UNDEFINED
end if
end if
end if
end if
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+3] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+3] .and. -65536)+$ks
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+3] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+3] .and. -16711681)+sh_left($value_rule_keyswitch_redirect_key_velocity3,16)
end function
function clear_redirect_midi_learn_buttons
$button_rule_keyswitch_redirect_midi_learn0 := 0
$button_rule_keyswitch_redirect_midi_learn1 := 0
$button_rule_keyswitch_redirect_midi_learn2 := 0
$button_rule_keyswitch_redirect_midi_learn3 := 0
$keyswitch_redirect_midi_learn_index := -1
$button_keyswitch_midi_find := 0
$button_keyswitch_midi_learn_inc := 0
$button_keyswitch_midi_learn := 0
end function
on ui_control($menu_global_cc_hanging)
%global_config[$GLOBAL_CONFIG_CC_HANGING] := $menu_global_cc_hanging
end on
on ui_control($menu_rules)
call gui_update_for_selected_rule
end on
on ui_control($button_add)
$idx := -1
$i := 0
while ($i<$MAX_RULES)
if ($idx=-1 and (%rules___config[$i*$MAX_CONFIG_PER_RULE+$RULE_DEFINED]=0))
$idx := $i
end if
inc($i)
end while
if ($idx=-1)
message("Can't add a new rule, already at limit of " & $MAX_GUI_RULES)
else
!rules___name[$idx] := "New Rule"
select ($idx)
case 0
@_rules_name00 := "New Rule"
case 1
@_rules_name01 := "New Rule"
case 2
@_rules_name02 := "New Rule"
case 3
@_rules_name03 := "New Rule"
case 4
@_rules_name04 := "New Rule"
case 5
@_rules_name05 := "New Rule"
case 6
@_rules_name06 := "New Rule"
case 7
@_rules_name07 := "New Rule"
case 8
@_rules_name08 := "New Rule"
case 9
@_rules_name09 := "New Rule"
case 10
@_rules_name10 := "New Rule"
case 11
@_rules_name11 := "New Rule"
case 12
@_rules_name12 := "New Rule"
case 13
@_rules_name13 := "New Rule"
case 14
@_rules_name14 := "New Rule"
case 15
@_rules_name15 := "New Rule"
end select
%rules___config[$idx*$MAX_CONFIG_PER_RULE+$RULE_DEFINED] := 1
%rules___config[$idx*$MAX_CONFIG_PER_RULE+$RULE_ENABLED] := 1
%rules___config[$idx*$MAX_CONFIG_PER_RULE+$RULE_KEYSWITCH_CHANNEL] := 1
%rules___config[$idx*$MAX_CONFIG_PER_RULE+$RULE_SOURCE_CHANNEL] := -1
%rules___config[$idx*$MAX_CONFIG_PER_RULE+$RULE_TARGET_CHANNEL] := 1
%rules___config[$idx*$MAX_CONFIG_PER_RULE+$RULE_CC_CHASING] := 2
$i := 0
while ($i<$MAX_KEYSWITCHES_PER_RULE)
%rules___keyswitches[$idx*$MAX_KEYSWITCHES_PER_RULE+$i] := $KEYSWITCH_UNDEFINED
%rules___keyswitch_config[$idx*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] := $VELOCITY_RANGE_DEFAULT
%rules___keyswitch_config[$idx*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_ACTION] := $KEYSWITCH_ACTION_BLOCK
%rules___keyswitch_config[$idx*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_FLAGS] := 0
%rules___keyswitch_config[$idx*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING] := 0
%rules___keyswitch_config[$idx*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING_FIRST_NOTE] := 0
%rules___keyswitch_config[$idx*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_SOURCE_CHANNEL] := 0
%rules___keyswitch_config[$idx*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_TARGET_CHANNEL] := 0
$j := 0
while ($j<$MAX_REDIRECTS_PER_KEYSWITCH)
%rules___keyswitch_redirects[$idx*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($i*$MAX_REDIRECTS_PER_KEYSWITCH)+$j] := (%rules___keyswitch_redirects[$idx*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($i*$MAX_REDIRECTS_PER_KEYSWITCH)+$j] .and. -65536)+$KEYSWITCH_UNDEFINED
inc($j)
end while
inc($i)
end while
set_menu_item_str(get_ui_id($menu_rules),$idx,!rules___name[$idx])
set_menu_item_visibility(get_ui_id($menu_rules),$idx,1)
$menu_rules := $idx
call gui_update_for_selected_rule
end if
$button_add := 0
end on
on ui_control($button_remove)
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$target := -1
$i := 0
while ($i<$MAX_GUI_RULES)
if (%rules___config[$i*$MAX_CONFIG_PER_RULE+$RULE_DEFINED]=1 and ($i # $rule) and ($target=-1 or (abs($rule-$i)<abs($rule-$target))))
$target := $i
end if
inc($i)
end while
if ($target=-1)
!rules___name[$rule] := "Your first rule - rename me!"
select ($rule)
case 0
@_rules_name00 := "Your first rule - rename me!"
case 1
@_rules_name01 := "Your first rule - rename me!"
case 2
@_rules_name02 := "Your first rule - rename me!"
case 3
@_rules_name03 := "Your first rule - rename me!"
case 4
@_rules_name04 := "Your first rule - rename me!"
case 5
@_rules_name05 := "Your first rule - rename me!"
case 6
@_rules_name06 := "Your first rule - rename me!"
case 7
@_rules_name07 := "Your first rule - rename me!"
case 8
@_rules_name08 := "Your first rule - rename me!"
case 9
@_rules_name09 := "Your first rule - rename me!"
case 10
@_rules_name10 := "Your first rule - rename me!"
case 11
@_rules_name11 := "Your first rule - rename me!"
case 12
@_rules_name12 := "Your first rule - rename me!"
case 13
@_rules_name13 := "Your first rule - rename me!"
case 14
@_rules_name14 := "Your first rule - rename me!"
case 15
@_rules_name15 := "Your first rule - rename me!"
end select
%rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_DEFINED] := 1
%rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_ENABLED] := 1
%rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_KEYSWITCH_CHANNEL] := 1
%rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_SOURCE_CHANNEL] := -1
%rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_TARGET_CHANNEL] := 1
%rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_CC_CHASING] := 2
$i := 0
while ($i<$MAX_KEYSWITCHES_PER_RULE)
%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$i] := $KEYSWITCH_UNDEFINED
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] := $VELOCITY_RANGE_DEFAULT
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_ACTION] := $KEYSWITCH_ACTION_BLOCK
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_FLAGS] := 0
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING] := 0
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING_FIRST_NOTE] := 0
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_SOURCE_CHANNEL] := 0
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_TARGET_CHANNEL] := 0
$j := 0
while ($j<$MAX_REDIRECTS_PER_KEYSWITCH)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($i*$MAX_REDIRECTS_PER_KEYSWITCH)+$j] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($i*$MAX_REDIRECTS_PER_KEYSWITCH)+$j] .and. -65536)+$KEYSWITCH_UNDEFINED
inc($j)
end while
inc($i)
end while
set_menu_item_str(get_ui_id($menu_rules),$idx,!rules___name[$idx])
call gui_update_for_selected_rule
else
%rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_DEFINED] := 0
$menu_rules := $target
set_menu_item_visibility(get_ui_id($menu_rules),$rule,0)
call gui_update_for_selected_rule
message("")
end if
$button_remove := 0
end on
on ui_control($button_rule_clone)
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
if ($rule>=0)
$idx := -1
$i := 0
while ($i<$MAX_RULES)
if ($idx=-1 and (%rules___config[$i*$MAX_CONFIG_PER_RULE+$RULE_DEFINED]=0))
$idx := $i
end if
inc($i)
end while
if ($idx=-1)
message("Can't add a new rule, already at limit of " & $MAX_GUI_RULES)
else
!rules___name[$idx] := !rules___name[$rule]
select ($idx)
case 0
@_rules_name00 := !rules___name[$rule]
case 1
@_rules_name01 := !rules___name[$rule]
case 2
@_rules_name02 := !rules___name[$rule]
case 3
@_rules_name03 := !rules___name[$rule]
case 4
@_rules_name04 := !rules___name[$rule]
case 5
@_rules_name05 := !rules___name[$rule]
case 6
@_rules_name06 := !rules___name[$rule]
case 7
@_rules_name07 := !rules___name[$rule]
case 8
@_rules_name08 := !rules___name[$rule]
case 9
@_rules_name09 := !rules___name[$rule]
case 10
@_rules_name10 := !rules___name[$rule]
case 11
@_rules_name11 := !rules___name[$rule]
case 12
@_rules_name12 := !rules___name[$rule]
case 13
@_rules_name13 := !rules___name[$rule]
case 14
@_rules_name14 := !rules___name[$rule]
case 15
@_rules_name15 := !rules___name[$rule]
end select
%rules___config[$idx*$MAX_CONFIG_PER_RULE+$RULE_DEFINED] := %rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_DEFINED]
%rules___config[$idx*$MAX_CONFIG_PER_RULE+$RULE_ENABLED] := %rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_ENABLED]
%rules___config[$idx*$MAX_CONFIG_PER_RULE+$RULE_KEYSWITCH_CHANNEL] := %rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_KEYSWITCH_CHANNEL]
%rules___config[$idx*$MAX_CONFIG_PER_RULE+$RULE_SOURCE_CHANNEL] := %rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_SOURCE_CHANNEL]
%rules___config[$idx*$MAX_CONFIG_PER_RULE+$RULE_TARGET_CHANNEL] := %rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_TARGET_CHANNEL]
%rules___config[$idx*$MAX_CONFIG_PER_RULE+$RULE_CC_CHASING] := %rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_CC_CHASING]
$i := 0
while ($i<$MAX_KEYSWITCHES_PER_RULE)
%rules___keyswitches[$idx*$MAX_KEYSWITCHES_PER_RULE+$i] := %rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$i]
%rules___keyswitch_config[$idx*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE]
%rules___keyswitch_config[$idx*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_FLAGS] := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_FLAGS]
%rules___keyswitch_config[$idx*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_ACTION] := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_ACTION]
%rules___keyswitch_config[$idx*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING] := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING]
%rules___keyswitch_config[$idx*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING_FIRST_NOTE] := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING_FIRST_NOTE]
%rules___keyswitch_config[$idx*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_SOURCE_CHANNEL] := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_SOURCE_CHANNEL]
%rules___keyswitch_config[$idx*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_TARGET_CHANNEL] := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($i*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_TARGET_CHANNEL]
$j := 0
while ($j<$MAX_REDIRECTS_PER_KEYSWITCH)
$evcode := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($i*$MAX_REDIRECTS_PER_KEYSWITCH)+$j] .and. 65535
$velocity := sh_right(%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($i*$MAX_REDIRECTS_PER_KEYSWITCH)+$j],16) .and. 255
%rules___keyswitch_redirects[$idx*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($i*$MAX_REDIRECTS_PER_KEYSWITCH)+$j] := (%rules___keyswitch_redirects[$idx*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($i*$MAX_REDIRECTS_PER_KEYSWITCH)+$j] .and. -65536)+$evcode
%rules___keyswitch_redirects[$idx*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($i*$MAX_REDIRECTS_PER_KEYSWITCH)+$j] := (%rules___keyswitch_redirects[$idx*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($i*$MAX_REDIRECTS_PER_KEYSWITCH)+$j] .and. -16711681)+sh_left($velocity,16)
inc($j)
end while
inc($i)
end while
!rules___name[$idx] := !rules___name[$rule] & " +"
select ($idx)
case 0
@_rules_name00 := !rules___name[$rule] & " +"
case 1
@_rules_name01 := !rules___name[$rule] & " +"
case 2
@_rules_name02 := !rules___name[$rule] & " +"
case 3
@_rules_name03 := !rules___name[$rule] & " +"
case 4
@_rules_name04 := !rules___name[$rule] & " +"
case 5
@_rules_name05 := !rules___name[$rule] & " +"
case 6
@_rules_name06 := !rules___name[$rule] & " +"
case 7
@_rules_name07 := !rules___name[$rule] & " +"
case 8
@_rules_name08 := !rules___name[$rule] & " +"
case 9
@_rules_name09 := !rules___name[$rule] & " +"
case 10
@_rules_name10 := !rules___name[$rule] & " +"
case 11
@_rules_name11 := !rules___name[$rule] & " +"
case 12
@_rules_name12 := !rules___name[$rule] & " +"
case 13
@_rules_name13 := !rules___name[$rule] & " +"
case 14
@_rules_name14 := !rules___name[$rule] & " +"
case 15
@_rules_name15 := !rules___name[$rule] & " +"
end select
set_menu_item_str(get_ui_id($menu_rules),$idx,!rules___name[$idx])
set_menu_item_visibility(get_ui_id($menu_rules),$idx,1)
$menu_rules := $idx
call gui_update_for_selected_rule
end if
end if
$button_rule_clone := 0
end on
on ui_control(@text_rule_name)
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
!rules___name[$rule] := @text_rule_name
select ($rule)
case 0
@_rules_name00 := @text_rule_name
case 1
@_rules_name01 := @text_rule_name
case 2
@_rules_name02 := @text_rule_name
case 3
@_rules_name03 := @text_rule_name
case 4
@_rules_name04 := @text_rule_name
case 5
@_rules_name05 := @text_rule_name
case 6
@_rules_name06 := @text_rule_name
case 7
@_rules_name07 := @text_rule_name
case 8
@_rules_name08 := @text_rule_name
case 9
@_rules_name09 := @text_rule_name
case 10
@_rules_name10 := @text_rule_name
case 11
@_rules_name11 := @text_rule_name
case 12
@_rules_name12 := @text_rule_name
case 13
@_rules_name13 := @text_rule_name
case 14
@_rules_name14 := @text_rule_name
case 15
@_rules_name15 := @text_rule_name
end select
set_menu_item_str(get_ui_id($menu_rules),$rule,@text_rule_name)
end on
on ui_control($button_rule_bypass)
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
%rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_ENABLED] := 1-$button_rule_bypass
$need_maps_rebuild := 1
call gui_clear_active_routes_for_all_channels
end on
on ui_control($menu_rule_keyswitch_channel)
$j := 0
while ($j<$NUM_SOURCE_CHANNELS)
%active_routes_bitmap[$j*2+0] := 0
%active_routes_bitmap[$j*2+1] := 0
%blackholed_sources[$j] := 0
inc($j)
end while
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
%rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_KEYSWITCH_CHANNEL] := $menu_rule_keyswitch_channel
$need_maps_rebuild := 1
end on
on ui_control($menu_rule_source_channel)
$j := 0
while ($j<$NUM_SOURCE_CHANNELS)
%active_routes_bitmap[$j*2+0] := 0
%active_routes_bitmap[$j*2+1] := 0
%blackholed_sources[$j] := 0
inc($j)
end while
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
%rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_SOURCE_CHANNEL] := $menu_rule_source_channel
$need_maps_rebuild := 1
end on
on ui_control($menu_rule_target_channel)
$j := 0
while ($j<$NUM_SOURCE_CHANNELS)
%active_routes_bitmap[$j*2+0] := 0
%active_routes_bitmap[$j*2+1] := 0
%blackholed_sources[$j] := 0
inc($j)
end while
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
%rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_TARGET_CHANNEL] := $menu_rule_target_channel
$need_maps_rebuild := 1
end on
on ui_control($menu_rule_cc_chasing)
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
%rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_CC_CHASING] := $menu_rule_cc_chasing
$need_maps_rebuild := 1
call gui_update_for_selected_rule
end on
on ui_control($menu_keyswitches)
call gui_update_for_selected_keyswitch
end on
on ui_control($button_keyswitch_new)
$ks := $KEYSWITCH_UNDEFINED
call gui_append_keyswitch_to_selected_rule
$button_keyswitch_new := 0
end on
on ui_control($button_keyswitch_midi_learn)
if ($button_keyswitch_midi_learn=0)
$need_maps_rebuild := 1
else
call clear_redirect_midi_learn_buttons
$button_keyswitch_midi_learn := 1
end if
end on
on ui_control($button_keyswitch_midi_learn_inc)
if ($button_keyswitch_midi_learn_inc=0)
$need_maps_rebuild := 1
else
call clear_redirect_midi_learn_buttons
$button_keyswitch_midi_learn_inc := 1
end if
end on
on ui_control($button_keyswitch_remove)
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$ks := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$ks] := $KEYSWITCH_UNDEFINED
$target := 0
$source := 0
while ($source<$MAX_KEYSWITCHES_PER_RULE)
if (%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$source] # $KEYSWITCH_UNDEFINED)
%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$target] := %rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$source]
if (%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$source]<0 or (%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$source]=$KEYSWITCH_UNDEFINED))
@name := "Undefined"
else
if (%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$source]<128)
@name := !note_names[%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$source]]
if (%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($source*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] # $VELOCITY_RANGE_DEFAULT)
@name := @name & "   vel " & (%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($source*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 255) & "-" & (sh_right(%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($source*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE],8) .and. 255)
end if
else
if (%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$source]<256)
@name := "Prog " & (%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$source] mod 127)
else
@name := "CC" & (%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$source]/128-128) & " / " & (%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($source*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 255)
if (%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($source*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 255 # (sh_right(%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($source*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE],8) .and. 255))
@name := @name & "-" & (sh_right(%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($source*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE],8) .and. 255)
end if
end if
end if
end if
set_menu_item_str(get_ui_id($menu_keyswitches),$target,@name)
set_menu_item_visibility(get_ui_id($menu_keyswitches),$target,1)
$i := 0
while ($i<$MAX_CONFIG_PER_KEYSWITCH)
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($target*$MAX_CONFIG_PER_KEYSWITCH)+$i] := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($source*$MAX_CONFIG_PER_KEYSWITCH)+$i]
inc($i)
end while
$i := 0
while ($i<$MAX_REDIRECTS_PER_KEYSWITCH)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($target*$MAX_REDIRECTS_PER_KEYSWITCH)+$i] := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($source*$MAX_REDIRECTS_PER_KEYSWITCH)+$i]
inc($i)
end while
$target := $target+1
end if
inc($source)
end while
if ($menu_keyswitches>=$target and ($target>0))
$menu_keyswitches := $target-1
end if
$target := $target
while ($target<$MAX_KEYSWITCHES_PER_RULE)
%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$target] := $KEYSWITCH_UNDEFINED
$i := 0
while ($i<$MAX_CONFIG_PER_KEYSWITCH)
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($target*$MAX_CONFIG_PER_KEYSWITCH)+$i] := -1
inc($i)
end while
$i := 0
while ($i<$MAX_REDIRECTS_PER_KEYSWITCH)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($target*$MAX_REDIRECTS_PER_KEYSWITCH)+$i] := $KEYSWITCH_UNDEFINED
inc($i)
end while
set_menu_item_str(get_ui_id($menu_keyswitches),$target,"<empty>")
set_menu_item_visibility(get_ui_id($menu_keyswitches),$target,0)
inc($target)
end while
call gui_update_for_selected_keyswitch
$button_keyswitch_remove := 0
$need_maps_rebuild := 1
end on
on ui_control($button_keyswitch_midi_find)
if ($button_keyswitch_midi_find=1)
call clear_redirect_midi_learn_buttons
$button_keyswitch_midi_find := 1
end if
end on
on ui_control($button_keyswitch_clone)
$ks := $KEYSWITCH_UNDEFINED
call gui_append_keyswitch_to_selected_rule
$button_keyswitch_clone := 0
end on
on ui_control($button_keyswitch_clear)
call gui_clear_keyswitches_for_selected_rule
$need_maps_rebuild := 1
$button_keyswitch_clear := 0
end on
on ui_control($menu_rule_keyswitch_type)
if ($menu_rule_keyswitch_type=0)
$ks := 0
else
if ($menu_rule_keyswitch_type=2)
$ks := 128
else
$ks := 130*128
end if
end if
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$idx] := $ks
call gui_update_for_selected_keyswitch
call gui_update_keyswitch_name
end on
on ui_control($value_rule_keyswitch_key)
call gui_set_selected_keyswitch_from_ui
$need_maps_rebuild := 1
end on
on ui_control($value_rule_keyswitch_velocity_range_min)
call gui_set_selected_keyswitch_from_ui
end on
on ui_control($value_rule_keyswitch_velocity_range_max)
call gui_set_selected_keyswitch_from_ui
end on
on ui_control($value_rule_keyswitch_cc)
call gui_set_selected_keyswitch_from_ui
$need_maps_rebuild := 1
end on
on ui_control($value_rule_keyswitch_cc_value_range_min)
call gui_set_selected_keyswitch_from_ui
$need_maps_rebuild := 1
end on
on ui_control($value_rule_keyswitch_cc_value_range_max)
call gui_set_selected_keyswitch_from_ui
$need_maps_rebuild := 1
end on
on ui_control($value_rule_keyswitch_program)
call gui_set_selected_keyswitch_from_ui
$need_maps_rebuild := 1
end on
on ui_control($value_rule_keyswitch_transpose)
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
if ($RULE_KEYSWITCH_TRANSPOSE=$RULE_KEYSWITCH_ACTION and ($value_rule_keyswitch_transpose=$KEYSWITCH_ACTION_REDIRECT))
if (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. 65535=$KEYSWITCH_UNDEFINED)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. -65536)+0
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. -16711681)+sh_left(127,16)
end if
end if
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_TRANSPOSE] := $value_rule_keyswitch_transpose
end on
on ui_control($value_rule_timing)
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
if ($RULE_TIMING=$RULE_KEYSWITCH_ACTION and ($value_rule_timing=$KEYSWITCH_ACTION_REDIRECT))
if (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. 65535=$KEYSWITCH_UNDEFINED)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. -65536)+0
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. -16711681)+sh_left(127,16)
end if
end if
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING] := $value_rule_timing
end on
on ui_control($value_rule_timing_first_note)
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
if ($RULE_TIMING_FIRST_NOTE=$RULE_KEYSWITCH_ACTION and ($value_rule_timing_first_note=$KEYSWITCH_ACTION_REDIRECT))
if (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. 65535=$KEYSWITCH_UNDEFINED)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. -65536)+0
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. -16711681)+sh_left(127,16)
end if
end if
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING_FIRST_NOTE] := $value_rule_timing_first_note
end on
on ui_control($menu_rule_keyswitch_action)
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
if ($RULE_KEYSWITCH_ACTION=$RULE_KEYSWITCH_ACTION and ($menu_rule_keyswitch_action=$KEYSWITCH_ACTION_REDIRECT))
if (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. 65535=$KEYSWITCH_UNDEFINED)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. -65536)+0
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. -16711681)+sh_left(127,16)
end if
end if
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_ACTION] := $menu_rule_keyswitch_action
call gui_update_for_selected_keyswitch
end on
on ui_control($menu_rule_keyswitch_source_channel)
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
if ($RULE_KEYSWITCH_SOURCE_CHANNEL=$RULE_KEYSWITCH_ACTION and ($menu_rule_keyswitch_source_channel=$KEYSWITCH_ACTION_REDIRECT))
if (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. 65535=$KEYSWITCH_UNDEFINED)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. -65536)+0
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. -16711681)+sh_left(127,16)
end if
end if
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_SOURCE_CHANNEL] := $menu_rule_keyswitch_source_channel
$need_maps_rebuild := 1
call gui_clear_active_routes_for_all_channels
end on
on ui_control($menu_rule_keyswitch_target_channel)
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
if ($RULE_KEYSWITCH_TARGET_CHANNEL=$RULE_KEYSWITCH_ACTION and ($menu_rule_keyswitch_target_channel=$KEYSWITCH_ACTION_REDIRECT))
if (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. 65535=$KEYSWITCH_UNDEFINED)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. -65536)+0
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. -16711681)+sh_left(127,16)
end if
end if
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_TARGET_CHANNEL] := $menu_rule_keyswitch_target_channel
$need_maps_rebuild := 1
call gui_clear_active_routes_for_all_channels
end on
on ui_control($switch_rule_keyswitch_flags_hold_notes)
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
$value := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_FLAGS] .and. .not. $KEYSWITCH_FLAG_HOLD_NOTES
if ($switch_rule_keyswitch_flags_hold_notes # 0)
$value := $value .or. $KEYSWITCH_FLAG_HOLD_NOTES
end if
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_FLAGS] := $value
end on
on ui_control($switch_rule_keyswitch_flags_redirect_only)
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
$value := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_FLAGS] .and. .not. $KEYSWITCH_FLAG_IGNORE_ROUTING
if ($switch_rule_keyswitch_flags_redirect_only # 0)
$value := $value .or. $KEYSWITCH_FLAG_IGNORE_ROUTING
end if
%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_FLAGS] := $value
end on
on midi_in
%active_notes_timing[$MIDI_CHANNEL*$NUM_SOURCE_CHANNELS+$MIDI_BYTE_1] := $timing
%active_notes_timing_first_note[$MIDI_CHANNEL*$NUM_SOURCE_CHANNELS+$MIDI_BYTE_1] := $timing_first_note
if ($need_maps_rebuild=1)
$need_maps_rebuild := 0
call build_ks_maps
end if
if ($MIDI_COMMAND=$MIDI_COMMAND_NOTE_ON and ($MIDI_BYTE_1 # $j))
$last_note := $MIDI_BYTE_1
end if
$i := 1
%legato_array[0] := $i
if ($MIDI_COMMAND=$MIDI_COMMAND_NOTE_OFF and ($MIDI_BYTE_1=$last_note))
$i := 0
%legato_array[0] := $i
end if
if ($MIDI_COMMAND=$MIDI_COMMAND_NOTE_ON and ($MIDI_BYTE_2>0))
$is_note_on_event := 1
else
$is_note_on_event := 0
end if
if ($MIDI_COMMAND=$MIDI_COMMAND_NOTE_ON and ($MIDI_BYTE_2=0) or ($MIDI_COMMAND=$MIDI_COMMAND_NOTE_OFF))
%legato_array[1] := %legato_array[0]
$is_note_off_event := 1
else
$is_note_off_event := 0
end if
if ($is_note_on_event=1 or ($is_note_off_event=1))
$ks := $MIDI_BYTE_1
else
if ($MIDI_COMMAND=$MIDI_COMMAND_CC and ($MIDI_BYTE_1>=0))
$ks := 128*128+($MIDI_BYTE_1*128)+$MIDI_BYTE_2
else
if ($MIDI_COMMAND=$MIDI_COMMAND_PROGRAM_CHANGE)
$ks := 128+$MIDI_BYTE_1
else
$ks := $KEYSWITCH_UNDEFINED
end if
end if
end if
if ($ks # $KEYSWITCH_UNDEFINED and ($button_keyswitch_midi_learn=1 or ($button_keyswitch_midi_learn_inc=1)))
ignore_midi
if ($is_note_on_event=1 or ($MIDI_COMMAND=$MIDI_COMMAND_CC) or ($MIDI_COMMAND=$MIDI_COMMAND_PROGRAM_CHANGE))
call gui_append_keyswitch_to_selected_rule
end if
else
if ($ks # $KEYSWITCH_UNDEFINED and ($button_keyswitch_midi_find=1))
ignore_midi
if ($is_note_on_event=1 or ($MIDI_COMMAND=$MIDI_COMMAND_CC) or ($MIDI_COMMAND=$MIDI_COMMAND_PROGRAM_CHANGE))
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$idx := -1
$j := 0
while ($j<$MAX_KEYSWITCHES_PER_RULE and ($idx=-1))
if (%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$j]=$ks or ($ks>=(128*128) and (%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$j]=($ks/128*128))))
if ($ks>128 and ($ks<(128*128)) or ($MIDI_BYTE_2>=(%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($j*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 255) and ($MIDI_BYTE_2<=(sh_right(%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($j*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE],8) .and. 255))) or ($MIDI_BYTE_2=-1))
$idx := $j
end if
end if
inc($j)
end while
if ($idx # -1)
$menu_keyswitches := $idx
call gui_update_for_selected_keyswitch
else
if ($ks<0 or ($ks=$KEYSWITCH_UNDEFINED))
@name := "Undefined"
else
if ($ks<128)
@name := !note_names[$ks]
if ($MIDI_BYTE_2+sh_left($MIDI_BYTE_2,8) # $VELOCITY_RANGE_DEFAULT)
@name := @name & "   vel " & ($MIDI_BYTE_2+sh_left($MIDI_BYTE_2,8) .and. 255) & "-" & (sh_right($MIDI_BYTE_2+sh_left($MIDI_BYTE_2,8),8) .and. 255)
end if
else
if ($ks<256)
@name := "Prog " & ($ks mod 127)
else
@name := "CC" & ($ks/128-128) & " / " & ($MIDI_BYTE_2+sh_left($MIDI_BYTE_2,8) .and. 255)
if ($MIDI_BYTE_2+sh_left($MIDI_BYTE_2,8) .and. 255 # (sh_right($MIDI_BYTE_2+sh_left($MIDI_BYTE_2,8),8) .and. 255))
@name := @name & "-" & (sh_right($MIDI_BYTE_2+sh_left($MIDI_BYTE_2,8),8) .and. 255)
end if
end if
end if
end if
message("Keyswitch " & @name & " not found for this rule")
end if
end if
else
if ($ks # $KEYSWITCH_UNDEFINED and ($keyswitch_redirect_midi_learn_index # -1))
ignore_midi
if ($is_note_on_event=1 or ($MIDI_COMMAND=$MIDI_COMMAND_CC) or ($MIDI_COMMAND=$MIDI_COMMAND_PROGRAM_CHANGE))
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
if ($ks>=0)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+$keyswitch_redirect_midi_learn_index] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+$keyswitch_redirect_midi_learn_index] .and. -65536)+$ks
end if
if ($MIDI_BYTE_2>=0)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+$keyswitch_redirect_midi_learn_index] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+$keyswitch_redirect_midi_learn_index] .and. -16711681)+sh_left($MIDI_BYTE_2,16)
end if
call clear_redirect_midi_learn_buttons
call gui_update_for_selected_keyswitch
$need_maps_rebuild := 1
end if
else
if ($ks # $KEYSWITCH_UNDEFINED and (%ks_to_keyswitch_channels[$ks] .and. sh_left(1,$MIDI_CHANNEL) # 0))
if ($is_note_on_event=1 or ($MIDI_COMMAND=$MIDI_COMMAND_CC) or ($MIDI_COMMAND=$MIDI_COMMAND_PROGRAM_CHANGE))
if ($num_ks_down=0)
$active_keyswitch_source_channels_bitmap := 0
end if
$triggered := 0
ignore_midi
$rule := 0
while ($rule<$MAX_GUI_RULES)
if (%ks_to_rules[$ks] .and. sh_left(1,$rule) # 0 and (%rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_KEYSWITCH_CHANNEL]=($MIDI_CHANNEL+1) or (%rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_KEYSWITCH_CHANNEL]=-1)))
$idx := 0
while ($idx<$MAX_KEYSWITCHES_PER_RULE)
if (%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$idx]=$ks or ($ks>=(128*128) and (%rules___keyswitches[$rule*$MAX_KEYSWITCHES_PER_RULE+$idx]=($ks/128*128))))
if ($ks>128 and ($ks<(128*128)) or ($MIDI_BYTE_2>=(%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE] .and. 255) and ($MIDI_BYTE_2<=(sh_right(%rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_VELOCITY_RANGE],8) .and. 255))))
$source := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_SOURCE_CHANNEL]
if ($source=0)
$source := %rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_SOURCE_CHANNEL]
end if
$target := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_TARGET_CHANNEL]
if ($target=0)
$target := %rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_TARGET_CHANNEL]
end if
$flag := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_FLAGS]
if ($target>0)
$target := $target-1
$action := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_ACTION]
$transpose := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_KEYSWITCH_TRANSPOSE]
$timing := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING]
$timing_first_note := %rules___keyswitch_config[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_CONFIG_PER_KEYSWITCH+($idx*$MAX_CONFIG_PER_KEYSWITCH)+$RULE_TIMING_FIRST_NOTE]
if ($flag .and. $KEYSWITCH_FLAG_IGNORE_ROUTING=0)
if ($source=-1)
$j := 0
while ($j<$NUM_SOURCE_CHANNELS)
if ($active_keyswitch_source_channels_bitmap .and. sh_left(1,$j)=0)
%active_routes_bitmap[$j*2+0] := 0
%active_routes_bitmap[$j*2+1] := 0
%blackholed_sources[$j] := 0
$active_keyswitch_source_channels_bitmap := $active_keyswitch_source_channels_bitmap .or. sh_left(1,$j)
end if
$_idx := $j*2
if ($target<32)
%active_routes_bitmap[$_idx] := %active_routes_bitmap[$_idx] .or. sh_left(1,$target)
else
%active_routes_bitmap[$_idx+1] := %active_routes_bitmap[$_idx+1] .or. sh_left(1,$target-32)
end if
inc($j)
end while
$_i := 1
while ($_i<=127)
if (%last_cc_values[$_i] # -1)
$value := %last_cc_values[$_i] .and. 255
$_channel := sh_right(%last_cc_values[$_i],8) .and. 255
if ($value>=0)
$config := %rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_CC_CHASING]
if ($config=1)
$flag := 1
else
if ($config=2 and ($_i=1 or ($_i=2) or ($_i=11) or ($_i>=64 and ($_i<=69))))
$flag := 1
else
$flag := 0
end if
end if
if ($flag=1)
set_midi($target,$MIDI_COMMAND_CC,$_i,$value)
if ($value>0)
$_idx2 := $_channel*128*2+($_i*2)
if ($target<32)
%active_ccs_routes_bitmap[$_idx2] := %active_ccs_routes_bitmap[$_idx2] .or. sh_left(1,$target)
else
%active_ccs_routes_bitmap[$_idx2+1] := %active_ccs_routes_bitmap[$_idx2+1] .or. sh_left(1,$target)
end if
end if
end if
end if
if ($value=0)
%last_cc_values[$_i] := -1
end if
end if
inc($_i)
end while
else
if ($active_keyswitch_source_channels_bitmap .and. sh_left(1,$source-1)=0)
%active_routes_bitmap[($source-1)*2+0] := 0
%active_routes_bitmap[($source-1)*2+1] := 0
%blackholed_sources[$source-1] := 0
$active_keyswitch_source_channels_bitmap := $active_keyswitch_source_channels_bitmap .or. sh_left(1,$source-1)
end if
$_idx := ($source-1)*2
if ($target<32)
%active_routes_bitmap[$_idx] := %active_routes_bitmap[$_idx] .or. sh_left(1,$target)
else
%active_routes_bitmap[$_idx+1] := %active_routes_bitmap[$_idx+1] .or. sh_left(1,$target-32)
end if
$_i2 := 1
while ($_i2<=127)
$value := %last_cc_values_by_source[($source-1)*$NUM_SOURCE_CHANNELS+$_i2]
if ($value>=0)
$config := %rules___config[$rule*$MAX_CONFIG_PER_RULE+$RULE_CC_CHASING]
if ($config=1)
$flag := 1
else
if ($config=2 and ($_i2=1 or ($_i2=2) or ($_i2=11) or ($_i2>=64 and ($_i2<=69))))
$flag := 1
else
$flag := 0
end if
end if
if ($flag=1)
set_midi($target,$MIDI_COMMAND_CC,$_i2,$value)
if ($value>0)
$_idx2 := ($source-1)*128*2+($_i2*2)
if ($target<32)
%active_ccs_routes_bitmap[$_idx2] := %active_ccs_routes_bitmap[$_idx2] .or. sh_left(1,$target)
else
%active_ccs_routes_bitmap[$_idx2+1] := %active_ccs_routes_bitmap[$_idx2+1] .or. sh_left(1,$target)
end if
end if
end if
end if
if ($value=0)
%last_cc_values_by_source[($source-1)*$NUM_SOURCE_CHANNELS+$_i2] := -1
end if
inc($_i2)
end while
end if
end if
if ($DEBUG=1)
end if
$_noteidx := 0
while (%active_keyswitch_notes_list[$_noteidx] # -1)
$value := %active_keyswitch_notes_list[$_noteidx]
%active_keyswitch_notes_list[$_noteidx] := -1
set_midi(sh_right($value,8) .and. 255,$MIDI_COMMAND_NOTE_ON,$value .and. 255,0)
$_noteidx := $_noteidx+1
end while
if ($action # $KEYSWITCH_ACTION_BLOCK)
if ($action=$KEYSWITCH_ACTION_PASSTHROUGH)
set_midi($target,$MIDI_COMMAND,$MIDI_BYTE_1,$MIDI_BYTE_2)
else
$i := 0
while (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+$i] .and. 65535 # $KEYSWITCH_UNDEFINED and ($i<$MAX_REDIRECTS_PER_KEYSWITCH))
$evcode := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+$i] .and. 65535
if ($evcode<128)
$velocity := sh_right(%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+$i],16) .and. 255
set_midi($target,$MIDI_COMMAND_NOTE_ON,$evcode,$velocity)
if ($flag .and. $KEYSWITCH_FLAG_HOLD_NOTES # 0)
$_noteidx := 0
while (%active_keyswitch_notes_list[$_noteidx] # -1)
$_noteidx := $_noteidx+1
end while
%active_keyswitch_notes_list[$_noteidx] := $evcode+sh_left($target,8)
else
set_midi($target,$MIDI_COMMAND_NOTE_ON,$evcode,0)
end if
else
if ($evcode<256)
set_midi($target,$MIDI_COMMAND_PROGRAM_CHANGE,$evcode-129,0)
else
set_midi($target,$MIDI_COMMAND_CC,$evcode/128-128,$evcode mod 128)
end if
end if
$i := $i+1
end while
end if
end if
else
if ($flag .and. $KEYSWITCH_FLAG_IGNORE_ROUTING=0)
if ($source=-1)
$j := 0
while ($j<$NUM_SOURCE_CHANNELS)
%active_routes_bitmap[$j*2+0] := 0
%active_routes_bitmap[$j*2+1] := 0
%blackholed_sources[$j] := 0
%blackholed_sources[$j] := 1
inc($j)
end while
else
%active_routes_bitmap[($source-1)*2+0] := 0
%active_routes_bitmap[($source-1)*2+1] := 0
%blackholed_sources[$source-1] := 0
%blackholed_sources[$source-1] := 1
end if
end if
end if
$triggered := 1
end if
end if
inc($idx)
end while
end if
inc($rule)
end while
if ($triggered=0)
set_midi($target,$MIDI_COMMAND,$MIDI_BYTE_1,$MIDI_BYTE_2)
end if
if ($is_note_on_event=1)
inc($num_ks_down)
end if
else
if ($is_note_off_event=1)
if ($num_ks_down>0)
dec($num_ks_down)
end if
end if
end if
else
message(%legato_array[0] & " " & %legato_array[1])
if ($timing>0 or ($timing_first_note>0))
ignore_midi
if (%legato_array[1]=0)
wait($timing_first_note*1000+1)
end if
wait($timing*1000+1)
end if
$offset := $MIDI_CHANNEL*2
$idx := $MIDI_CHANNEL*128*2+($MIDI_BYTE_1*2)
$dst_midi_byte_1 := $MIDI_BYTE_1
if ($is_note_off_event=1)
$j := %active_notes_transpose[$MIDI_CHANNEL*$NUM_SOURCE_CHANNELS+$MIDI_BYTE_1]
if (%active_notes_routes_bitmap[$idx] # %active_routes_bitmap[$offset] or (%active_notes_routes_bitmap[$idx+1] # %active_routes_bitmap[$offset+1]) or ($j # $transpose))
if (%active_notes_routes_bitmap[$idx] # 0)
$i := 0
while ($i<=31)
if (%active_notes_routes_bitmap[$idx] .and. sh_left(1,$i) # 0)
set_midi(0+$i,$MIDI_COMMAND,$MIDI_BYTE_1+$j,$MIDI_BYTE_2)
end if
inc($i)
end while
end if
if (%active_notes_routes_bitmap[$idx+1] # 0)
$i := 0
while ($i<=31)
if (%active_notes_routes_bitmap[$idx+1] .and. sh_left(1,$i) # 0)
set_midi(32+$i,$MIDI_COMMAND,$MIDI_BYTE_1+$j,$MIDI_BYTE_2)
end if
inc($i)
end while
end if
end if
%active_notes_routes_bitmap[$idx] := 0
%active_notes_routes_bitmap[$idx+1] := 0
$dst_midi_byte_1 := $dst_midi_byte_1+$transpose
else
if ($is_note_on_event=1)
%active_notes_routes_bitmap[$idx] := %active_notes_routes_bitmap[$idx] .or. %active_routes_bitmap[$offset]
%active_notes_routes_bitmap[$idx+1] := %active_notes_routes_bitmap[$idx+1] .or. %active_routes_bitmap[$offset+1]
%active_notes_transpose[$MIDI_CHANNEL*$NUM_SOURCE_CHANNELS+$MIDI_BYTE_1] := $transpose
$dst_midi_byte_1 := $dst_midi_byte_1+$transpose
end if
end if
if ($MIDI_COMMAND=$MIDI_COMMAND_CC)
%last_cc_values_by_source[$MIDI_CHANNEL*$NUM_SOURCE_CHANNELS+$MIDI_BYTE_1] := $MIDI_BYTE_2
%last_cc_values[$MIDI_BYTE_1] := $MIDI_BYTE_2 .or. sh_left($MIDI_CHANNEL,8)
if ($MIDI_BYTE_1=123)
$num_ks_down := 0
$active_keyswitch_source_channels_bitmap := 0
$j := 0
$k := 0
$i := $MIDI_CHANNEL*128*2
while ($i<=($MIDI_CHANNEL*128*2+(127*2)))
$j := $j .or. %active_notes_routes_bitmap[$i]
$k := $k .or. %active_notes_routes_bitmap[$i+1]
%active_notes_routes_bitmap[$i] := 0
%active_notes_routes_bitmap[$i+1] := 0
$i := $i+2
end while
$i := 0
while ($i<=31)
if ($j .and. sh_left(1,$i) # 0)
set_midi(0+$i,$MIDI_COMMAND,$MIDI_BYTE_1,$MIDI_BYTE_2)
end if
inc($i)
end while
$i := 0
while ($i<=31)
if ($k .and. sh_left(1,$i) # 0)
set_midi(32+$i,$MIDI_COMMAND,$MIDI_BYTE_1,$MIDI_BYTE_2)
end if
inc($i)
end while
else
if ($MIDI_BYTE_2=0)
$config := %global_config[$GLOBAL_CONFIG_CC_HANGING]
if ($config=1)
$j := 1
else
if ($config=2 and ($MIDI_BYTE_1=2 or ($MIDI_BYTE_1=64)))
$j := 1
else
$j := 0
end if
end if
if ($j=1 and (%active_ccs_routes_bitmap[$idx] # %active_routes_bitmap[$offset] or (%active_ccs_routes_bitmap[$idx+1] # %active_routes_bitmap[$offset+1])))
if (%active_ccs_routes_bitmap[$idx] # 0)
$i := 0
while ($i<=31)
if (%active_ccs_routes_bitmap[$idx] .and. sh_left(1,$i) # 0)
set_midi(0+$i,$MIDI_COMMAND,$MIDI_BYTE_1,$MIDI_BYTE_2)
end if
inc($i)
end while
end if
if (%active_ccs_routes_bitmap[$idx+1] # 0)
$i := 0
while ($i<=31)
if (%active_ccs_routes_bitmap[$idx+1] .and. sh_left(1,$i) # 0)
set_midi(32+$i,$MIDI_COMMAND,$MIDI_BYTE_1,$MIDI_BYTE_2)
end if
inc($i)
end while
end if
end if
%active_ccs_routes_bitmap[$idx] := 0
%active_ccs_routes_bitmap[$idx+1] := 0
else
%active_ccs_routes_bitmap[$idx] := %active_ccs_routes_bitmap[$idx] .or. %active_routes_bitmap[$offset]
%active_ccs_routes_bitmap[$idx+1] := %active_ccs_routes_bitmap[$idx+1] .or. %active_routes_bitmap[$offset+1]
end if
end if
end if
if (%active_routes_bitmap[$offset] # 0 or (%active_routes_bitmap[$offset+1] # 0))
ignore_midi
if (%active_routes_bitmap[$offset] # 0)
$i := 0
while ($i<=31)
if (%active_routes_bitmap[$offset] .and. sh_left(1,$i) # 0)
set_midi(0+$i,$MIDI_COMMAND,$dst_midi_byte_1,$MIDI_BYTE_2)
end if
inc($i)
end while
end if
if (%active_routes_bitmap[$offset+1] # 0)
$i := 0
while ($i<=31)
if (%active_routes_bitmap[$offset+1] .and. sh_left(1,$i) # 0)
set_midi(32+$i,$MIDI_COMMAND,$dst_midi_byte_1,$MIDI_BYTE_2)
end if
inc($i)
end while
end if
else
if (%blackholed_sources[$MIDI_CHANNEL] # 0)
ignore_midi
end if
end if
end if
end if
end if
end if
end on
on ui_control($button_rule_keyswitch_addremove0)
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
$value := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0]
if ($value=$KEYSWITCH_UNDEFINED)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+(0-1)]
else
$i := 0
while ($i<=($MAX_REDIRECTS_PER_KEYSWITCH-2))
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+$i] := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+$i+1]
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+$i+1] := $KEYSWITCH_UNDEFINED
inc($i)
end while
end if
call gui_update_for_selected_keyswitch
$button_rule_keyswitch_addremove0 := 0
end on
on ui_control($menu_rule_keyswitch_redirect_type0)
$velocity := -1
if ($menu_rule_keyswitch_redirect_type0=0)
$evcode := 0
$velocity := 127
else
if ($menu_rule_keyswitch_redirect_type0=2)
$evcode := 128
else
$evcode := 130*128
end if
end if
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
if ($evcode>=0)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. -65536)+$evcode
end if
if ($velocity>=0)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. -16711681)+sh_left($velocity,16)
end if
call gui_update_for_selected_keyswitch
end on
on ui_control($value_rule_keyswitch_redirect_key0)
call gui_set_selected_keyswitch_redirect_from_ui
end on
on ui_control($value_rule_keyswitch_redirect_key_velocity0)
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
if (-1>=0)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. -65536)+-1
end if
if ($value_rule_keyswitch_redirect_key_velocity0>=0)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+0] .and. -16711681)+sh_left($value_rule_keyswitch_redirect_key_velocity0,16)
end if
call gui_set_selected_keyswitch_redirect_from_ui
end on
on ui_control($value_rule_keyswitch_redirect_cc0)
call gui_set_selected_keyswitch_redirect_from_ui
end on
on ui_control($value_rule_keyswitch_redirect_cc_value0)
call gui_set_selected_keyswitch_redirect_from_ui
end on
on ui_control($value_rule_keyswitch_redirect_program0)
call gui_set_selected_keyswitch_redirect_from_ui
end on
on ui_control($button_rule_keyswitch_redirect_midi_learn0)
if ($keyswitch_redirect_midi_learn_index=0)
$button_rule_keyswitch_redirect_midi_learn0 := 0
$keyswitch_redirect_midi_learn_index := -1
else
call clear_redirect_midi_learn_buttons
$button_rule_keyswitch_redirect_midi_learn0 := 1
$keyswitch_redirect_midi_learn_index := 0
end if
end on
on ui_control($button_rule_keyswitch_addremove1)
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
$value := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+1]
if ($value=$KEYSWITCH_UNDEFINED)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+1] := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+(1-1)]
else
$i := 1
while ($i<=($MAX_REDIRECTS_PER_KEYSWITCH-2))
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+$i] := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+$i+1]
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+$i+1] := $KEYSWITCH_UNDEFINED
inc($i)
end while
end if
call gui_update_for_selected_keyswitch
$button_rule_keyswitch_addremove1 := 0
end on
on ui_control($menu_rule_keyswitch_redirect_type1)
$velocity := -1
if ($menu_rule_keyswitch_redirect_type1=0)
$evcode := 0
$velocity := 127
else
if ($menu_rule_keyswitch_redirect_type1=2)
$evcode := 128
else
$evcode := 130*128
end if
end if
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
if ($evcode>=0)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+1] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+1] .and. -65536)+$evcode
end if
if ($velocity>=0)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+1] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+1] .and. -16711681)+sh_left($velocity,16)
end if
call gui_update_for_selected_keyswitch
end on
on ui_control($value_rule_keyswitch_redirect_key1)
call gui_set_selected_keyswitch_redirect_from_ui
end on
on ui_control($value_rule_keyswitch_redirect_key_velocity1)
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
if (-1>=0)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+1] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+1] .and. -65536)+-1
end if
if ($value_rule_keyswitch_redirect_key_velocity1>=0)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+1] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+1] .and. -16711681)+sh_left($value_rule_keyswitch_redirect_key_velocity1,16)
end if
call gui_set_selected_keyswitch_redirect_from_ui
end on
on ui_control($value_rule_keyswitch_redirect_cc1)
call gui_set_selected_keyswitch_redirect_from_ui
end on
on ui_control($value_rule_keyswitch_redirect_cc_value1)
call gui_set_selected_keyswitch_redirect_from_ui
end on
on ui_control($value_rule_keyswitch_redirect_program1)
call gui_set_selected_keyswitch_redirect_from_ui
end on
on ui_control($button_rule_keyswitch_redirect_midi_learn1)
if ($keyswitch_redirect_midi_learn_index=1)
$button_rule_keyswitch_redirect_midi_learn1 := 0
$keyswitch_redirect_midi_learn_index := -1
else
call clear_redirect_midi_learn_buttons
$button_rule_keyswitch_redirect_midi_learn1 := 1
$keyswitch_redirect_midi_learn_index := 1
end if
end on
on ui_control($button_rule_keyswitch_addremove2)
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
$value := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+2]
if ($value=$KEYSWITCH_UNDEFINED)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+2] := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+(2-1)]
else
$i := 2
while ($i<=($MAX_REDIRECTS_PER_KEYSWITCH-2))
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+$i] := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+$i+1]
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+$i+1] := $KEYSWITCH_UNDEFINED
inc($i)
end while
end if
call gui_update_for_selected_keyswitch
$button_rule_keyswitch_addremove2 := 0
end on
on ui_control($menu_rule_keyswitch_redirect_type2)
$velocity := -1
if ($menu_rule_keyswitch_redirect_type2=0)
$evcode := 0
$velocity := 127
else
if ($menu_rule_keyswitch_redirect_type2=2)
$evcode := 128
else
$evcode := 130*128
end if
end if
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
if ($evcode>=0)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+2] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+2] .and. -65536)+$evcode
end if
if ($velocity>=0)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+2] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+2] .and. -16711681)+sh_left($velocity,16)
end if
call gui_update_for_selected_keyswitch
end on
on ui_control($value_rule_keyswitch_redirect_key2)
call gui_set_selected_keyswitch_redirect_from_ui
end on
on ui_control($value_rule_keyswitch_redirect_key_velocity2)
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
if (-1>=0)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+2] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+2] .and. -65536)+-1
end if
if ($value_rule_keyswitch_redirect_key_velocity2>=0)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+2] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+2] .and. -16711681)+sh_left($value_rule_keyswitch_redirect_key_velocity2,16)
end if
call gui_set_selected_keyswitch_redirect_from_ui
end on
on ui_control($value_rule_keyswitch_redirect_cc2)
call gui_set_selected_keyswitch_redirect_from_ui
end on
on ui_control($value_rule_keyswitch_redirect_cc_value2)
call gui_set_selected_keyswitch_redirect_from_ui
end on
on ui_control($value_rule_keyswitch_redirect_program2)
call gui_set_selected_keyswitch_redirect_from_ui
end on
on ui_control($button_rule_keyswitch_redirect_midi_learn2)
if ($keyswitch_redirect_midi_learn_index=2)
$button_rule_keyswitch_redirect_midi_learn2 := 0
$keyswitch_redirect_midi_learn_index := -1
else
call clear_redirect_midi_learn_buttons
$button_rule_keyswitch_redirect_midi_learn2 := 1
$keyswitch_redirect_midi_learn_index := 2
end if
end on
on ui_control($button_rule_keyswitch_addremove3)
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
$value := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+3]
if ($value=$KEYSWITCH_UNDEFINED)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+3] := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+(3-1)]
else
$i := 3
while ($i<=($MAX_REDIRECTS_PER_KEYSWITCH-2))
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+$i] := %rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+$i+1]
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+$i+1] := $KEYSWITCH_UNDEFINED
inc($i)
end while
end if
call gui_update_for_selected_keyswitch
$button_rule_keyswitch_addremove3 := 0
end on
on ui_control($menu_rule_keyswitch_redirect_type3)
$velocity := -1
if ($menu_rule_keyswitch_redirect_type3=0)
$evcode := 0
$velocity := 127
else
if ($menu_rule_keyswitch_redirect_type3=2)
$evcode := 128
else
$evcode := 130*128
end if
end if
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
if ($evcode>=0)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+3] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+3] .and. -65536)+$evcode
end if
if ($velocity>=0)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+3] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+3] .and. -16711681)+sh_left($velocity,16)
end if
call gui_update_for_selected_keyswitch
end on
on ui_control($value_rule_keyswitch_redirect_key3)
call gui_set_selected_keyswitch_redirect_from_ui
end on
on ui_control($value_rule_keyswitch_redirect_key_velocity3)
$rule := get_control_par(get_ui_id($menu_rules),$CONTROL_PAR_SELECTED_ITEM_IDX)
$idx := get_control_par(get_ui_id($menu_keyswitches),$CONTROL_PAR_SELECTED_ITEM_IDX)
if (-1>=0)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+3] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+3] .and. -65536)+-1
end if
if ($value_rule_keyswitch_redirect_key_velocity3>=0)
%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+3] := (%rules___keyswitch_redirects[$rule*$MAX_KEYSWITCHES_PER_RULE*$MAX_REDIRECTS_PER_KEYSWITCH+($idx*$MAX_REDIRECTS_PER_KEYSWITCH)+3] .and. -16711681)+sh_left($value_rule_keyswitch_redirect_key_velocity3,16)
end if
call gui_set_selected_keyswitch_redirect_from_ui
end on
on ui_control($value_rule_keyswitch_redirect_cc3)
call gui_set_selected_keyswitch_redirect_from_ui
end on
on ui_control($value_rule_keyswitch_redirect_cc_value3)
call gui_set_selected_keyswitch_redirect_from_ui
end on
on ui_control($value_rule_keyswitch_redirect_program3)
call gui_set_selected_keyswitch_redirect_from_ui
end on
on ui_control($button_rule_keyswitch_redirect_midi_learn3)
if ($keyswitch_redirect_midi_learn_index=3)
$button_rule_keyswitch_redirect_midi_learn3 := 0
$keyswitch_redirect_midi_learn_index := -1
else
call clear_redirect_midi_learn_buttons
$button_rule_keyswitch_redirect_midi_learn3 := 1
$keyswitch_redirect_midi_learn_index := 3
end if
end on
